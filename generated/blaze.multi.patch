From ef2d1ac05f604f2b80efc7e65ec112b699aeb82d Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:28:51 -0600
Subject: [PATCH 01/49] Step 1: Run `meteor create` and add README file,
 screenshot image, and license file

---
 .gitignore                  |    1 +
 .meteor/.finished-upgraders |   19 +
 .meteor/.gitignore          |    1 +
 .meteor/.id                 |    7 +
 .meteor/packages            |   23 +
 .meteor/platforms           |    2 +
 .meteor/release             |    1 +
 .meteor/versions            |   79 ++
 .vscode/typings/meteor.d.ts | 2013 +++++++++++++++++++++++++++++++++++++++++++
 README.md                   |    2 +-
 client/main.css             |    4 +
 client/main.html            |   25 +
 client/main.js              |   22 +
 package-lock.json           |  586 +++++++++++++
 package.json                |   22 +
 server/main.js              |    5 +
 tests/main.js               |   20 +
 17 files changed, 2831 insertions(+), 1 deletion(-)
 create mode 100644 .gitignore
 create mode 100644 .meteor/.finished-upgraders
 create mode 100644 .meteor/.gitignore
 create mode 100644 .meteor/.id
 create mode 100644 .meteor/packages
 create mode 100644 .meteor/platforms
 create mode 100644 .meteor/release
 create mode 100644 .meteor/versions
 create mode 100644 .vscode/typings/meteor.d.ts
 create mode 100644 client/main.css
 create mode 100644 client/main.html
 create mode 100644 client/main.js
 create mode 100644 package-lock.json
 create mode 100644 package.json
 create mode 100644 server/main.js
 create mode 100644 tests/main.js

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..c2658d7
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+node_modules/
diff --git a/.meteor/.finished-upgraders b/.meteor/.finished-upgraders
new file mode 100644
index 0000000..c07b6ff
--- /dev/null
+++ b/.meteor/.finished-upgraders
@@ -0,0 +1,19 @@
+# This file contains information which helps Meteor properly upgrade your
+# app when you run 'meteor update'. You should check it into version control
+# with your project.
+
+notices-for-0.9.0
+notices-for-0.9.1
+0.9.4-platform-file
+notices-for-facebook-graph-api-2
+1.2.0-standard-minifiers-package
+1.2.0-meteor-platform-split
+1.2.0-cordova-changes
+1.2.0-breaking-changes
+1.3.0-split-minifiers-package
+1.4.0-remove-old-dev-bundle-link
+1.4.1-add-shell-server-package
+1.4.3-split-account-service-packages
+1.5-add-dynamic-import-package
+1.7-split-underscore-from-meteor-base
+1.8.3-split-jquery-from-blaze
diff --git a/.meteor/.gitignore b/.meteor/.gitignore
new file mode 100644
index 0000000..4083037
--- /dev/null
+++ b/.meteor/.gitignore
@@ -0,0 +1 @@
+local
diff --git a/.meteor/.id b/.meteor/.id
new file mode 100644
index 0000000..f0202ba
--- /dev/null
+++ b/.meteor/.id
@@ -0,0 +1,7 @@
+# This file contains a token that is unique to your project.
+# Check it into your repository along with the rest of this directory.
+# It can be used for purposes such as:
+#   - ensuring you don't accidentally deploy one app on top of another
+#   - providing package authors with aggregated statistics
+
+n18mu7qp2iv8.yc43zesoklum
diff --git a/.meteor/packages b/.meteor/packages
new file mode 100644
index 0000000..0d859be
--- /dev/null
+++ b/.meteor/packages
@@ -0,0 +1,23 @@
+# Meteor packages used by this project, one per line.
+# Check this file (and the other files in this directory) into your repository.
+#
+# 'meteor add' and 'meteor remove' will edit this file for you,
+# but you can also edit it by hand.
+
+meteor-base@1.4.0             # Packages every Meteor app needs to have
+mobile-experience@1.0.5       # Packages for a great mobile UX
+mongo@1.8.0                   # The database Meteor supports right now
+blaze-html-templates    # Compile .html files into Meteor Blaze views
+jquery                  # Wrapper package for npm-installed jquery
+reactive-var@1.0.11            # Reactive variable for tracker
+tracker@1.2.0                 # Meteor's client-side reactive programming library
+
+standard-minifier-css@1.6.0   # CSS minifier run for production mode
+standard-minifier-js@2.6.0    # JS minifier run for production mode
+es5-shim@4.8.0                # ECMAScript 5 compatibility for older browsers
+ecmascript@0.14.2              # Enable ECMAScript2015+ syntax in app code
+typescript@3.7.5              # Enable TypeScript syntax in .ts and .tsx modules
+shell-server@0.4.0            # Server-side component of the `meteor shell` command
+
+autopublish@1.0.7             # Publish all data to the clients (for prototyping)
+insecure@1.0.7                # Allow all DB writes from clients (for prototyping)
diff --git a/.meteor/platforms b/.meteor/platforms
new file mode 100644
index 0000000..efeba1b
--- /dev/null
+++ b/.meteor/platforms
@@ -0,0 +1,2 @@
+server
+browser
diff --git a/.meteor/release b/.meteor/release
new file mode 100644
index 0000000..8558e14
--- /dev/null
+++ b/.meteor/release
@@ -0,0 +1 @@
+METEOR@1.9.2
diff --git a/.meteor/versions b/.meteor/versions
new file mode 100644
index 0000000..3af382b
--- /dev/null
+++ b/.meteor/versions
@@ -0,0 +1,79 @@
+allow-deny@1.1.0
+autopublish@1.0.7
+autoupdate@1.6.0
+babel-compiler@7.5.2
+babel-runtime@1.5.0
+base64@1.0.12
+binary-heap@1.0.11
+blaze@2.3.4
+blaze-html-templates@1.1.2
+blaze-tools@1.0.10
+boilerplate-generator@1.6.0
+caching-compiler@1.2.1
+caching-html-compiler@1.1.3
+callback-hook@1.3.0
+check@1.3.1
+ddp@1.4.0
+ddp-client@2.3.3
+ddp-common@1.4.0
+ddp-server@2.3.1
+deps@1.0.12
+diff-sequence@1.1.1
+dynamic-import@0.5.1
+ecmascript@0.14.2
+ecmascript-runtime@0.7.0
+ecmascript-runtime-client@0.10.0
+ecmascript-runtime-server@0.9.0
+ejson@1.1.1
+es5-shim@4.8.0
+fetch@0.1.1
+geojson-utils@1.0.10
+hot-code-push@1.0.4
+html-tools@1.0.11
+htmljs@1.0.11
+id-map@1.1.0
+insecure@1.0.7
+inter-process-messaging@0.1.0
+jquery@3.0.0
+launch-screen@1.1.1
+livedata@1.0.18
+logging@1.1.20
+meteor@1.9.3
+meteor-base@1.4.0
+minifier-css@1.5.0
+minifier-js@2.6.0
+minimongo@1.4.5
+mobile-experience@1.0.5
+mobile-status-bar@1.0.14
+modern-browsers@0.1.5
+modules@0.15.0
+modules-runtime@0.12.0
+mongo@1.8.1
+mongo-decimal@0.1.1
+mongo-dev-server@1.1.0
+mongo-id@1.0.7
+npm-mongo@3.3.0
+observe-sequence@1.0.16
+ordered-dict@1.1.0
+promise@0.11.2
+random@1.1.0
+reactive-var@1.0.11
+reload@1.3.0
+retry@1.1.0
+routepolicy@1.1.0
+shell-server@0.4.0
+socket-stream-client@0.2.3
+spacebars@1.0.15
+spacebars-compiler@1.1.3
+standard-minifier-css@1.6.0
+standard-minifier-js@2.6.0
+templating@1.3.2
+templating-compiler@1.3.3
+templating-runtime@1.3.2
+templating-tools@1.1.2
+tracker@1.2.0
+typescript@3.7.5
+ui@1.0.13
+underscore@1.0.10
+webapp@1.8.2
+webapp-hashing@1.0.9
diff --git a/.vscode/typings/meteor.d.ts b/.vscode/typings/meteor.d.ts
new file mode 100644
index 0000000..9bb7d02
--- /dev/null
+++ b/.vscode/typings/meteor.d.ts
@@ -0,0 +1,2013 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/meteor-typings/meteor/241d0e5335025e64fc3ea064de80a026a08f3f06/1.3/header.d.ts
+
+// Generated by typings
+// Source: https://raw.githubusercontent.com/meteor-typings/meteor/241d0e5335025e64fc3ea064de80a026a08f3f06/1.3/main.d.ts
+declare module Accounts {
+  function user(): Meteor.User;
+
+  function userId(): string;
+
+  function createUser(options: {
+    username ? : string;
+    email ? : string;
+    password ? : string;
+    profile ? : Object;
+  }, callback ? : Function): string;
+
+  function config(options: {
+    sendVerificationEmail ? : boolean;
+    forbidClientAccountCreation ? : boolean;
+    restrictCreationByEmailDomain ? : string | Function;
+    loginExpirationInDays ? : number;
+    oauthSecretKey ? : string;
+  }): void;
+
+  function onLogin(func: Function): {
+    stop: () => void
+  };
+
+  function onLoginFailure(func: Function): {
+    stop: () => void
+  };
+
+  function loginServicesConfigured(): boolean;
+
+  function onPageLoadLogin(func: Function): void;
+}
+
+declare module "meteor/accounts-base" {
+  /// <reference path="meteor.d.ts" />
+
+  module Accounts {
+    function user(): Meteor.User;
+
+    function userId(): string;
+
+    function createUser(options: {
+      username ? : string;
+      email ? : string;
+      password ? : string;
+      profile ? : Object;
+    }, callback ? : Function): string;
+
+    function config(options: {
+      sendVerificationEmail ? : boolean;
+      forbidClientAccountCreation ? : boolean;
+      restrictCreationByEmailDomain ? : string | Function;
+      loginExpirationInDays ? : number;
+      oauthSecretKey ? : string;
+    }): void;
+
+    function onLogin(func: Function): {
+      stop: () => void
+    };
+
+    function onLoginFailure(func: Function): {
+      stop: () => void
+    };
+
+    function loginServicesConfigured(): boolean;
+
+    function onPageLoadLogin(func: Function): void;
+  }
+}
+declare module Accounts {
+  function changePassword(oldPassword: string, newPassword: string, callback ? : Function): void;
+
+  function forgotPassword(options: {
+    email ? : string;
+  }, callback ? : Function): void;
+
+  function resetPassword(token: string, newPassword: string, callback ? : Function): void;
+
+  function verifyEmail(token: string, callback ? : Function): void;
+
+  function onEmailVerificationLink(callback: Function): void;
+
+  function onEnrollmentLink(callback: Function): void;
+
+  function onResetPasswordLink(callback: Function): void;
+
+  function loggingIn(): boolean;
+
+  function logout(callback ? : Function): void;
+
+  function logoutOtherClients(callback ? : Function): void;
+
+  var ui: {
+    config(options: {
+      requestPermissions ? : Object;
+      requestOfflineToken ? : Object;
+      forceApprovalPrompt ? : Object;
+      passwordSignupFields ? : string;
+    }): void;
+  };
+}
+
+declare module "meteor/accounts-base" {
+  module Accounts {
+    function changePassword(oldPassword: string, newPassword: string, callback ? : Function): void;
+
+    function forgotPassword(options: {
+      email ? : string;
+    }, callback ? : Function): void;
+
+    function resetPassword(token: string, newPassword: string, callback ? : Function): void;
+
+    function verifyEmail(token: string, callback ? : Function): void;
+
+    function onEmailVerificationLink(callback: Function): void;
+
+    function onEnrollmentLink(callback: Function): void;
+
+    function onResetPasswordLink(callback: Function): void;
+
+    function loggingIn(): boolean;
+
+    function logout(callback ? : Function): void;
+
+    function logoutOtherClients(callback ? : Function): void;
+
+    var ui: {
+      config(options: {
+        requestPermissions ? : Object;
+        requestOfflineToken ? : Object;
+        forceApprovalPrompt ? : Object;
+        passwordSignupFields ? : string;
+      }): void;
+    };
+  }
+}
+
+interface EmailFields {
+  from ? : () => string;
+  subject ? : (user: Meteor.User) => string;
+  text ? : (user: Meteor.User, url: string) => string;
+  html ? : (user: Meteor.User, url: string) => string;
+}
+
+interface Header {
+  [id: string]: string;
+}
+
+interface EmailTemplates {
+  from: string;
+  siteName: string;
+  headers ? : Header;
+  resetPassword: EmailFields;
+  enrollAccount: EmailFields;
+  verifyEmail: EmailFields;
+}
+
+declare module Accounts {
+  var emailTemplates: EmailTemplates;
+
+  function addEmail(userId: string, newEmail: string, verified ? : boolean): void;
+
+  function removeEmail(userId: string, email: string): void;
+
+  function onCreateUser(func: Function): void;
+
+  function findUserByEmail(email: string): Object;
+
+  function findUserByUsername(username: string): Object;
+
+  function sendEnrollmentEmail(userId: string, email ? : string): void;
+
+  function sendResetPasswordEmail(userId: string, email ? : string): void;
+
+  function sendVerificationEmail(userId: string, email ? : string): void;
+
+  function setUsername(userId: string, newUsername: string): void;
+
+  function setPassword(userId: string, newPassword: string, options ? : {
+    logout ? : Object;
+  }): void;
+
+  function validateNewUser(func: Function): boolean;
+
+  function validateLoginAttempt(func: Function): {
+    stop: () => void
+  };
+
+  interface IValidateLoginAttemptCbOpts {
+    type: string;
+    allowed: boolean;
+    error: Meteor.Error;
+    user: Meteor.User;
+    connection: Meteor.Connection;
+    methodName: string;
+    methodArguments: any[];
+  }
+}
+
+declare module "meteor/accounts-base" {
+  /// <reference path="meteor.d.ts" />
+  /// <reference path="meteor_main.d.ts" />
+
+  interface EmailFields {
+    from ? : () => string;
+    subject ? : (user: Meteor.User) => string;
+    text ? : (user: Meteor.User, url: string) => string;
+    html ? : (user: Meteor.User, url: string) => string;
+  }
+
+  interface Header {
+    [id: string]: string;
+  }
+
+  interface EmailTemplates {
+    from: string;
+    siteName: string;
+    headers ? : Header;
+    resetPassword: EmailFields;
+    enrollAccount: EmailFields;
+    verifyEmail: EmailFields;
+  }
+
+  module Accounts {
+    var emailTemplates: EmailTemplates;
+
+    function addEmail(userId: string, newEmail: string, verified ? : boolean): void;
+
+    function removeEmail(userId: string, email: string): void;
+
+    function onCreateUser(func: Function): void;
+
+    function findUserByEmail(email: string): Object;
+
+    function findUserByUsername(username: string): Object;
+
+    function sendEnrollmentEmail(userId: string, email ? : string): void;
+
+    function sendResetPasswordEmail(userId: string, email ? : string): void;
+
+    function sendVerificationEmail(userId: string, email ? : string): void;
+
+    function setUsername(userId: string, newUsername: string): void;
+
+    function setPassword(userId: string, newPassword: string, options ? : {
+      logout ? : Object;
+    }): void;
+
+    function validateNewUser(func: Function): boolean;
+
+    function validateLoginAttempt(func: Function): {
+      stop: () => void
+    };
+
+    interface IValidateLoginAttemptCbOpts {
+      type: string;
+      allowed: boolean;
+      error: Meteor.Error;
+      user: Meteor.User;
+      connection: Meteor.Connection;
+      methodName: string;
+      methodArguments: any[];
+    }
+  }
+}
+
+declare module Blaze {
+  var View: ViewStatic;
+
+  interface ViewStatic {
+    new(name ? : string, renderFunction ? : Function): View;
+  }
+
+  interface View {
+    name: string;
+    parentView: View;
+    isCreated: boolean;
+    isRendered: boolean;
+    isDestroyed: boolean;
+    renderCount: number;
+    autorun(runFunc: Function): void;
+    onViewCreated(func: Function): void;
+    onViewReady(func: Function): void;
+    onViewDestroyed(func: Function): void;
+    firstNode(): Node;
+    lastNode(): Node;
+    template: Template;
+    templateInstance(): TemplateInstance;
+  }
+  var currentView: View;
+
+  function isTemplate(value: any): boolean;
+
+  interface HelpersMap {
+    [key: string]: Function;
+  }
+
+  interface EventsMap {
+    [key: string]: Function;
+  }
+
+  var Template: TemplateStatic;
+
+  interface TemplateStatic {
+    new(viewName ? : string, renderFunction ? : Function): Template;
+
+    registerHelper(name: string, func: Function): void;
+    instance(): TemplateInstance;
+    currentData(): any;
+    parentData(numLevels: number): any;
+  }
+
+  interface Template {
+    viewName: string;
+    renderFunction: Function;
+    constructView(): View;
+    head: Template;
+    find(selector: string): Template;
+    findAll(selector: string): Template[];
+    $: any;
+    onCreated(cb: Function): void;
+    onRendered(cb: Function): void;
+    onDestroyed(cb: Function): void;
+    created: Function;
+    rendered: Function;
+    destroyed: Function;
+    helpers(helpersMap: HelpersMap): void;
+    events(eventsMap: EventsMap): void;
+  }
+
+  var TemplateInstance: TemplateInstanceStatic;
+
+  interface TemplateInstanceStatic {
+    new(view: View): TemplateInstance;
+  }
+
+  interface TemplateInstance {
+    $(selector: string): any;
+    autorun(runFunc: Function): Object;
+    data: Object;
+    find(selector ? : string): TemplateInstance;
+    findAll(selector: string): TemplateInstance[];
+    firstNode: Object;
+    lastNode: Object;
+    subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+    subscriptionsReady(): boolean;
+    view: Object;
+  }
+
+  function Each(argFunc: Function, contentFunc: Function, elseFunc ? : Function): View;
+
+  function Unless(conditionFunc: Function, contentFunc: Function, elseFunc ? : Function): View;
+
+  function If(conditionFunc: Function, contentFunc: Function, elseFunc ? : Function): View;
+
+  function Let(bindings: Function, contentFunc: Function): View;
+
+  function With(data: Object | Function, contentFunc: Function): View;
+
+  function getData(elementOrView ? : HTMLElement | View): Object;
+
+  function getView(element ? : HTMLElement): View;
+
+  function remove(renderedView: View): void;
+
+  function render(templateOrView: Template | View, parentNode: Node, nextNode ? : Node, parentView ? : View): View;
+
+  function renderWithData(templateOrView: Template | View, data: Object | Function, parentNode: Node, nextNode ? : Node, parentView ? : View): View;
+
+  function toHTML(templateOrView: Template | View): string;
+
+  function toHTMLWithData(templateOrView: Template | View, data: Object | Function): string;
+}
+
+declare module "meteor/blaze" {
+  /// <reference path="meteor.d.ts" />
+
+  module Blaze {
+    var View: ViewStatic;
+
+    interface ViewStatic {
+      new(name ? : string, renderFunction ? : Function): View;
+    }
+
+    interface View {
+      name: string;
+      parentView: View;
+      isCreated: boolean;
+      isRendered: boolean;
+      isDestroyed: boolean;
+      renderCount: number;
+      autorun(runFunc: Function): void;
+      onViewCreated(func: Function): void;
+      onViewReady(func: Function): void;
+      onViewDestroyed(func: Function): void;
+      firstNode(): Node;
+      lastNode(): Node;
+      template: Template;
+      templateInstance(): TemplateInstance;
+    }
+    var currentView: View;
+
+    function isTemplate(value: any): boolean;
+
+    interface HelpersMap {
+      [key: string]: Function;
+    }
+
+    interface EventsMap {
+      [key: string]: Function;
+    }
+
+    var Template: TemplateStatic;
+
+    interface TemplateStatic {
+      new(viewName ? : string, renderFunction ? : Function): Template;
+
+      registerHelper(name: string, func: Function): void;
+      instance(): TemplateInstance;
+      currentData(): any;
+      parentData(numLevels: number): any;
+    }
+
+    interface Template {
+      viewName: string;
+      renderFunction: Function;
+      constructView(): View;
+      head: Template;
+      find(selector: string): Template;
+      findAll(selector: string): Template[];
+      $: any;
+      onCreated(cb: Function): void;
+      onRendered(cb: Function): void;
+      onDestroyed(cb: Function): void;
+      created: Function;
+      rendered: Function;
+      destroyed: Function;
+      helpers(helpersMap: HelpersMap): void;
+      events(eventsMap: EventsMap): void;
+    }
+
+    var TemplateInstance: TemplateInstanceStatic;
+
+    interface TemplateInstanceStatic {
+      new(view: View): TemplateInstance;
+    }
+
+    interface TemplateInstance {
+      $(selector: string): any;
+      autorun(runFunc: Function): Object;
+      data: Object;
+      find(selector ? : string): TemplateInstance;
+      findAll(selector: string): TemplateInstance[];
+      firstNode: Object;
+      lastNode: Object;
+      subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+      subscriptionsReady(): boolean;
+      view: Object;
+    }
+
+    function Each(argFunc: Function, contentFunc: Function, elseFunc ? : Function): View;
+
+    function Unless(conditionFunc: Function, contentFunc: Function, elseFunc ? : Function): View;
+
+    function If(conditionFunc: Function, contentFunc: Function, elseFunc ? : Function): View;
+
+    function Let(bindings: Function, contentFunc: Function): View;
+
+    function With(data: Object | Function, contentFunc: Function): View;
+
+    function getData(elementOrView ? : HTMLElement | View): Object;
+
+    function getView(element ? : HTMLElement): View;
+
+    function remove(renderedView: View): void;
+
+    function render(templateOrView: Template | View, parentNode: Node, nextNode ? : Node, parentView ? : View): View;
+
+    function renderWithData(templateOrView: Template | View, data: Object | Function, parentNode: Node, nextNode ? : Node, parentView ? : View): View;
+
+    function toHTML(templateOrView: Template | View): string;
+
+    function toHTMLWithData(templateOrView: Template | View, data: Object | Function): string;
+  }
+}
+declare module BrowserPolicy {
+  interface framing {
+    disallow(): void;
+    restrictToOrigin(origin: string): void;
+    allowAll(): void;
+  }
+
+  interface content {
+    allowEval(): void;
+    allowInlineStyles(): void;
+    allowInlineScripts(): void;
+    allowSameOriginForAll(): void;
+    allowDataUrlForAll(): void;
+    allowOriginForAll(origin: string): void;
+    allowImageOrigin(origin: string): void;
+    allowFrameOrigin(origin: string): void;
+    allowContentTypeSniffing(): void;
+    allowAllContentOrigin(): void;
+    allowAllContentDataUrl(): void;
+    allowAllContentSameOrigin(): void;
+
+    disallowAll(): void;
+    disallowInlineStyles(): void;
+    disallowEval(): void;
+    disallowInlineScripts(): void;
+    disallowFont(): void;
+    disallowObject(): void;
+    disallowAllContent(): void;
+  }
+}
+
+declare module "meteor/browser-policy" {
+  module BrowserPolicy {
+    interface framing {
+      disallow(): void;
+      restrictToOrigin(origin: string): void;
+      allowAll(): void;
+    }
+
+    interface content {
+      allowEval(): void;
+      allowInlineStyles(): void;
+      allowInlineScripts(): void;
+      allowSameOriginForAll(): void;
+      allowDataUrlForAll(): void;
+      allowOriginForAll(origin: string): void;
+      allowImageOrigin(origin: string): void;
+      allowFrameOrigin(origin: string): void;
+      allowContentTypeSniffing(): void;
+      allowAllContentOrigin(): void;
+      allowAllContentDataUrl(): void;
+      allowAllContentSameOrigin(): void;
+
+      disallowAll(): void;
+      disallowInlineStyles(): void;
+      disallowEval(): void;
+      disallowInlineScripts(): void;
+      disallowFont(): void;
+      disallowObject(): void;
+      disallowAllContent(): void;
+    }
+  }
+}
+declare module Match {
+  var Any: any;
+  var String: any;
+  var Integer: any;
+  var Boolean: any;
+  var undefined: any;
+  var Object: any;
+
+  function Optional(pattern: any): boolean;
+
+  function ObjectIncluding(dico: any): boolean;
+
+  function OneOf(...patterns: any[]): any;
+
+  function Where(condition: any): any;
+
+  function test(value: any, pattern: any): boolean;
+}
+
+declare function check(value: any, pattern: any): void;
+
+declare module "meteor/check" {
+  module Match {
+    var Any: any;
+    var String: any;
+    var Integer: any;
+    var Boolean: any;
+    var undefined: any;
+    var Object: any;
+
+    function Optional(pattern: any): boolean;
+
+    function ObjectIncluding(dico: any): boolean;
+
+    function OneOf(...patterns: any[]): any;
+
+    function Where(condition: any): any;
+
+    function test(value: any, pattern: any): boolean;
+  }
+
+  function check(value: any, pattern: any): void;
+}
+
+declare module DDP {
+  interface DDPStatic {
+    subscribe(name: string, ...rest: any[]): Meteor.SubscriptionHandle;
+    call(method: string, ...parameters: any[]): void;
+    apply(method: string, ...parameters: any[]): void;
+    methods(IMeteorMethodsDictionary: any): any;
+    status(): DDPStatus;
+    reconnect(): void;
+    disconnect(): void;
+    onReconnect(): void;
+  }
+
+  function _allSubscriptionsReady(): boolean;
+
+  interface DDPStatus {
+    connected: boolean;
+    /**
+     * connected,
+     * connecting,
+     * failed,
+     * waiting,
+     * offline
+     */
+    status: string;
+    retryCount: number;
+    retryTime ? : number;
+    reason ? : string;
+  }
+
+  function connect(url: string): DDPStatic;
+}
+
+declare module DDPCommon {
+  interface MethodInvocation {
+    new(options: {}): MethodInvocation;
+
+    unblock(): void;
+
+    setUserId(userId: number): void;
+  }
+}
+
+declare module "meteor/ddp" {
+  /// <reference path="meteor.d.ts" />
+
+  module DDP {
+    interface DDPStatic {
+      subscribe(name: string, ...rest: any[]): Meteor.SubscriptionHandle;
+      call(method: string, ...parameters: any[]): void;
+      apply(method: string, ...parameters: any[]): void;
+      methods(IMeteorMethodsDictionary: any): any;
+      status(): DDPStatus;
+      reconnect(): void;
+      disconnect(): void;
+      onReconnect(): void;
+    }
+
+    function _allSubscriptionsReady(): boolean;
+
+    interface DDPStatus {
+      connected: boolean;
+      /**
+       * connected,
+       * connecting,
+       * failed,
+       * waiting,
+       * offline
+       */
+      status: string;
+      retryCount: number;
+      retryTime ? : number;
+      reason ? : string;
+    }
+
+    function connect(url: string): DDPStatic;
+  }
+
+  module DDPCommon {
+    interface MethodInvocation {
+      new(options: {}): MethodInvocation;
+
+      unblock(): void;
+
+      setUserId(userId: number): void;
+    }
+  }
+}
+interface EJSONableCustomType {
+  clone(): EJSONableCustomType;
+  equals(other: Object): boolean;
+  toJSONValue(): JSONable;
+  typeName(): string;
+}
+interface EJSONable {
+  [key: string]: number | string | boolean | Object | number[] | string[] | Object[] | Date | Uint8Array | EJSONableCustomType;
+}
+interface JSONable {
+  [key: string]: number | string | boolean | Object | number[] | string[] | Object[];
+}
+interface EJSON extends EJSONable {}
+
+declare module EJSON {
+  function addType(name: string, factory: (val: JSONable) => EJSONableCustomType): void;
+
+  function clone < T > (val: T): T;
+
+  function equals(a: EJSON, b: EJSON, options ? : {
+    keyOrderSensitive ? : boolean;
+  }): boolean;
+
+  function fromJSONValue(val: JSONable): any;
+
+  function isBinary(x: Object): boolean;
+  var newBinary: any;
+
+  function parse(str: string): EJSON;
+
+  function stringify(val: EJSON, options ? : {
+    indent ? : boolean | number | string;
+    canonical ? : boolean;
+  }): string;
+
+  function toJSONValue(val: EJSON): JSONable;
+}
+
+declare module "meteor/ejson" {
+  interface EJSONableCustomType {
+    clone(): EJSONableCustomType;
+    equals(other: Object): boolean;
+    toJSONValue(): JSONable;
+    typeName(): string;
+  }
+  interface EJSONable {
+    [key: string]: number | string | boolean | Object | number[] | string[] | Object[] | Date | Uint8Array | EJSONableCustomType;
+  }
+  interface JSONable {
+    [key: string]: number | string | boolean | Object | number[] | string[] | Object[];
+  }
+  interface EJSON extends EJSONable {}
+
+  module EJSON {
+    function addType(name: string, factory: (val: JSONable) => EJSONableCustomType): void;
+
+    function clone < T > (val: T): T;
+
+    function equals(a: EJSON, b: EJSON, options ? : {
+      keyOrderSensitive ? : boolean;
+    }): boolean;
+
+    function fromJSONValue(val: JSONable): any;
+
+    function isBinary(x: Object): boolean;
+    var newBinary: any;
+
+    function parse(str: string): EJSON;
+
+    function stringify(val: EJSON, options ? : {
+      indent ? : boolean | number | string;
+      canonical ? : boolean;
+    }): string;
+
+    function toJSONValue(val: EJSON): JSONable;
+  }
+}
+declare module Email {
+  function send(options: {
+    from ? : string;
+    to ? : string | string[];
+    cc ? : string | string[];
+    bcc ? : string | string[];
+    replyTo ? : string | string[];
+    subject ? : string;
+    text ? : string;
+    html ? : string;
+    headers ? : Object;
+    attachments ? : Object[];
+    mailComposer ? : MailComposer;
+  }): void;
+}
+
+interface MailComposerOptions {
+  escapeSMTP: boolean;
+  encoding: string;
+  charset: string;
+  keepBcc: boolean;
+  forceEmbeddedImages: boolean;
+}
+
+declare var MailComposer: MailComposerStatic;
+interface MailComposerStatic {
+  new(options: MailComposerOptions): MailComposer;
+}
+interface MailComposer {
+  addHeader(name: string, value: string): void;
+  setMessageOption(from: string, to: string, body: string, html: string): void;
+  streamMessage(): void;
+  pipe(stream: any /** fs.WriteStream **/ ): void;
+}
+
+declare module "meteor/email" {
+  module Email {
+    function send(options: {
+      from ? : string;
+      to ? : string | string[];
+      cc ? : string | string[];
+      bcc ? : string | string[];
+      replyTo ? : string | string[];
+      subject ? : string;
+      text ? : string;
+      html ? : string;
+      headers ? : Object;
+      attachments ? : Object[];
+      mailComposer ? : MailComposer;
+    }): void;
+  }
+
+  interface MailComposerOptions {
+    escapeSMTP: boolean;
+    encoding: string;
+    charset: string;
+    keepBcc: boolean;
+    forceEmbeddedImages: boolean;
+  }
+
+  var MailComposer: MailComposerStatic;
+  interface MailComposerStatic {
+    new(options: MailComposerOptions): MailComposer;
+  }
+  interface MailComposer {
+    addHeader(name: string, value: string): void;
+    setMessageOption(from: string, to: string, body: string, html: string): void;
+    streamMessage(): void;
+    pipe(stream: any /** fs.WriteStream **/ ): void;
+  }
+}
+declare module HTTP {
+  interface HTTPRequest {
+    content ? : string;
+    data ? : any;
+    query ? : string;
+    params ? : {
+      [id: string]: string
+    };
+    auth ? : string;
+    headers ? : {
+      [id: string]: string
+    };
+    timeout ? : number;
+    followRedirects ? : boolean;
+  }
+
+  interface HTTPResponse {
+    statusCode ? : number;
+    headers ? : {
+      [id: string]: string
+    };
+    content ? : string;
+    data ? : any;
+  }
+
+  function call(method: string, url: string, options ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+  function del(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+  function get(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+  function post(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+  function put(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+  function call(method: string, url: string, options ? : {
+    content ? : string;
+    data ? : Object;
+    query ? : string;
+    params ? : Object;
+    auth ? : string;
+    headers ? : Object;
+    timeout ? : number;
+    followRedirects ? : boolean;
+    npmRequestOptions ? : Object;
+    beforeSend ? : Function;
+  }, asyncCallback ? : Function): HTTP.HTTPResponse;
+}
+
+declare module "meteor/http" {
+  module HTTP {
+    interface HTTPRequest {
+      content ? : string;
+      data ? : any;
+      query ? : string;
+      params ? : {
+        [id: string]: string
+      };
+      auth ? : string;
+      headers ? : {
+        [id: string]: string
+      };
+      timeout ? : number;
+      followRedirects ? : boolean;
+    }
+
+    interface HTTPResponse {
+      statusCode ? : number;
+      headers ? : {
+        [id: string]: string
+      };
+      content ? : string;
+      data ? : any;
+    }
+
+    function call(method: string, url: string, options ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+    function del(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+    function get(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+    function post(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+    function put(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+    function call(method: string, url: string, options ? : {
+      content ? : string;
+      data ? : Object;
+      query ? : string;
+      params ? : Object;
+      auth ? : string;
+      headers ? : Object;
+      timeout ? : number;
+      followRedirects ? : boolean;
+      npmRequestOptions ? : Object;
+      beforeSend ? : Function;
+    }, asyncCallback ? : Function): HTTP.HTTPResponse;
+  }
+}
+
+declare module Meteor {
+  /** Global props **/
+  var isClient: boolean;
+  var isCordova: boolean;
+  var isServer: boolean;
+  var release: string;
+  var settings: {
+    [id: string]: any
+  };
+  /** props **/
+
+  /** User **/
+  interface UserEmail {
+    address: string;
+    verified: boolean;
+  }
+  interface User {
+    _id ? : string;
+    username ? : string;
+    emails ? : UserEmail[];
+    createdAt ? : number;
+    profile ? : any;
+    services ? : any;
+  }
+
+  function user(): User;
+
+  function userId(): string;
+  var users: Mongo.Collection < User > ;
+  /** User **/
+
+  /** Error **/
+  var Error: ErrorStatic;
+  interface ErrorStatic {
+    new(error: string | number, reason ? : string, details ? : string): Error;
+  }
+  interface Error {
+    error: string | number;
+    reason ? : string;
+    details ? : string;
+  }
+  /** Error **/
+
+  /** Method **/
+  function methods(methods: Object): void;
+
+  function call(name: string, ...args: any[]): any;
+
+  function apply(name: string, args: EJSONable[], options ? : {
+    wait ? : boolean;
+    onResultReceived ? : Function;
+  }, asyncCallback ? : Function): any;
+  /** Method **/
+
+  /** Url **/
+  function absoluteUrl(path ? : string, options ? : {
+    secure ? : boolean;
+    replaceLocalhost ? : boolean;
+    rootUrl ? : string;
+  }): string;
+  /** Url **/
+
+  /** Timeout **/
+  function setInterval(func: Function, delay: number): number;
+
+  function setTimeout(func: Function, delay: number): number;
+
+  function clearInterval(id: number): void;
+
+  function clearTimeout(id: number): void;
+
+  function defer(func: Function): void;
+  /** Timeout **/
+
+  /** utils **/
+  function startup(func: Function): void;
+
+  function wrapAsync(func: Function, context ? : Object): any;
+  /** utils **/
+
+  /** Pub/Sub **/
+  interface SubscriptionHandle {
+    stop(): void;
+    ready(): boolean;
+  }
+  interface LiveQueryHandle {
+    stop(): void;
+  }
+  /** Pub/Sub **/
+}
+
+declare module "meteor/meteor" {
+  /// <reference path="mongo.d.ts" />
+  /// <reference path="ejson.d.ts" />
+
+  module Meteor {
+    /** Global props **/
+    var isClient: boolean;
+    var isCordova: boolean;
+    var isServer: boolean;
+    var release: string;
+    var settings: {
+      [id: string]: any
+    };
+    /** props **/
+
+    /** User **/
+    interface UserEmail {
+      address: string;
+      verified: boolean;
+    }
+    interface User {
+      _id ? : string;
+      username ? : string;
+      emails ? : UserEmail[];
+      createdAt ? : number;
+      profile ? : any;
+      services ? : any;
+    }
+
+    function user(): User;
+
+    function userId(): string;
+    var users: Mongo.Collection < User > ;
+    /** User **/
+
+    /** Error **/
+    var Error: ErrorStatic;
+    interface ErrorStatic {
+      new(error: string | number, reason ? : string, details ? : string): Error;
+    }
+    interface Error {
+      error: string | number;
+      reason ? : string;
+      details ? : string;
+    }
+    /** Error **/
+
+    /** Method **/
+    function methods(methods: Object): void;
+
+    function call(name: string, ...args: any[]): any;
+
+    function apply(name: string, args: EJSONable[], options ? : {
+      wait ? : boolean;
+      onResultReceived ? : Function;
+    }, asyncCallback ? : Function): any;
+    /** Method **/
+
+    /** Url **/
+    function absoluteUrl(path ? : string, options ? : {
+      secure ? : boolean;
+      replaceLocalhost ? : boolean;
+      rootUrl ? : string;
+    }): string;
+    /** Url **/
+
+    /** Timeout **/
+    function setInterval(func: Function, delay: number): number;
+
+    function setTimeout(func: Function, delay: number): number;
+
+    function clearInterval(id: number): void;
+
+    function clearTimeout(id: number): void;
+
+    function defer(func: Function): void;
+    /** Timeout **/
+
+    /** utils **/
+    function startup(func: Function): void;
+
+    function wrapAsync(func: Function, context ? : Object): any;
+    /** utils **/
+
+    /** Pub/Sub **/
+    interface SubscriptionHandle {
+      stop(): void;
+      ready(): boolean;
+    }
+    interface LiveQueryHandle {
+      stop(): void;
+    }
+    /** Pub/Sub **/
+  }
+}
+
+declare module Meteor {
+  /** Login **/
+  interface LoginWithExternalServiceOptions {
+    requestPermissions ? : string[];
+    requestOfflineToken ? : Boolean;
+    forceApprovalPrompt ? : Boolean;
+    loginUrlParameters ? : Object;
+    redirectUrl ? : string;
+    loginHint ? : string;
+    loginStyle ? : string;
+  }
+
+  function loginWithMeteorDeveloperAccount(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+  function loginWithFacebook(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+  function loginWithGithub(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+  function loginWithGoogle(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+  function loginWithMeetup(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+  function loginWithTwitter(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+  function loginWithWeibo(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+  function loggingIn(): boolean;
+
+  function loginWith < ExternalService > (options ? : {
+    requestPermissions ? : string[];
+    requestOfflineToken ? : boolean;
+    loginUrlParameters ? : Object;
+    userEmail ? : string;
+    loginStyle ? : string;
+    redirectUrl ? : string;
+  }, callback ? : Function): void;
+
+  function loginWithPassword(user: Object | string, password: string, callback ? : Function): void;
+
+  function logout(callback ? : Function): void;
+
+  function logoutOtherClients(callback ? : Function): void;
+  /** Login **/
+
+  /** Event **/
+  interface Event {
+    type: string;
+    target: HTMLElement;
+    currentTarget: HTMLElement;
+    which: number;
+    stopPropagation(): void;
+    stopImmediatePropagation(): void;
+    preventDefault(): void;
+    isPropagationStopped(): boolean;
+    isImmediatePropagationStopped(): boolean;
+    isDefaultPrevented(): boolean;
+  }
+  interface EventHandlerFunction extends Function {
+    (event ? : Meteor.Event, templateInstance ? : Blaze.TemplateInstance): void;
+  }
+  interface EventMap {
+    [id: string]: Meteor.EventHandlerFunction;
+  }
+  /** Event **/
+
+  /** Connection **/
+  function reconnect(): void;
+
+  function disconnect(): void;
+  /** Connection **/
+
+  /** Status **/
+  function status(): DDP.DDPStatus;
+  /** Status **/
+
+  /** Pub/Sub **/
+  function subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+  /** Pub/Sub **/
+}
+
+declare module "meteor/meteor" {
+  /// <reference path="meteor.d.ts" />
+
+  module Meteor {
+    /** Login **/
+    interface LoginWithExternalServiceOptions {
+      requestPermissions ? : string[];
+      requestOfflineToken ? : Boolean;
+      forceApprovalPrompt ? : Boolean;
+      loginUrlParameters ? : Object;
+      redirectUrl ? : string;
+      loginHint ? : string;
+      loginStyle ? : string;
+    }
+
+    function loginWithMeteorDeveloperAccount(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+    function loginWithFacebook(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+    function loginWithGithub(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+    function loginWithGoogle(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+    function loginWithMeetup(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+    function loginWithTwitter(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+    function loginWithWeibo(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+    function loggingIn(): boolean;
+
+    function loginWith < ExternalService > (options ? : {
+      requestPermissions ? : string[];
+      requestOfflineToken ? : boolean;
+      loginUrlParameters ? : Object;
+      userEmail ? : string;
+      loginStyle ? : string;
+      redirectUrl ? : string;
+    }, callback ? : Function): void;
+
+    function loginWithPassword(user: Object | string, password: string, callback ? : Function): void;
+
+    function logout(callback ? : Function): void;
+
+    function logoutOtherClients(callback ? : Function): void;
+    /** Login **/
+
+    /** Event **/
+    interface Event {
+      type: string;
+      target: HTMLElement;
+      currentTarget: HTMLElement;
+      which: number;
+      stopPropagation(): void;
+      stopImmediatePropagation(): void;
+      preventDefault(): void;
+      isPropagationStopped(): boolean;
+      isImmediatePropagationStopped(): boolean;
+      isDefaultPrevented(): boolean;
+    }
+    interface EventHandlerFunction extends Function {
+      (event ? : Meteor.Event, templateInstance ? : Blaze.TemplateInstance): void;
+    }
+    interface EventMap {
+      [id: string]: Meteor.EventHandlerFunction;
+    }
+    /** Event **/
+
+    /** Connection **/
+    function reconnect(): void;
+
+    function disconnect(): void;
+    /** Connection **/
+
+    /** Status **/
+    function status(): DDP.DDPStatus;
+    /** Status **/
+
+    /** Pub/Sub **/
+    function subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+    /** Pub/Sub **/
+  }
+}
+declare module Meteor {
+  /** Connection **/
+  interface Connection {
+    id: string;
+    close: Function;
+    onClose: Function;
+    clientAddress: string;
+    httpHeaders: Object;
+  }
+
+  function onConnection(callback: Function): void;
+  /** Connection **/
+
+  function publish(name: string, func: Function): void;
+}
+
+interface Subscription {
+  added(collection: string, id: string, fields: Object): void;
+  changed(collection: string, id: string, fields: Object): void;
+  connection: Meteor.Connection;
+  error(error: Error): void;
+  onStop(func: Function): void;
+  ready(): void;
+  removed(collection: string, id: string): void;
+  stop(): void;
+  userId: string;
+}
+
+declare module "meteor/meteor" {
+  module Meteor {
+    /** Connection **/
+    interface Connection {
+      id: string;
+      close: Function;
+      onClose: Function;
+      clientAddress: string;
+      httpHeaders: Object;
+    }
+
+    function onConnection(callback: Function): void;
+    /** Connection **/
+
+    function publish(name: string, func: Function): void;
+  }
+
+  interface Subscription {
+    added(collection: string, id: string, fields: Object): void;
+    changed(collection: string, id: string, fields: Object): void;
+    connection: Meteor.Connection;
+    error(error: Error): void;
+    onStop(func: Function): void;
+    ready(): void;
+    removed(collection: string, id: string): void;
+    stop(): void;
+    userId: string;
+  }
+}
+declare module Mongo {
+  interface Selector {
+    [key: string]: any;
+  }
+  interface Selector extends Object {}
+  interface Modifier {}
+  interface SortSpecifier {}
+  interface FieldSpecifier {
+    [id: string]: Number;
+  }
+
+  var Collection: CollectionStatic;
+  interface CollectionStatic {
+    new < T > (name: string, options ? : {
+      connection ? : Object;
+      idGeneration ? : string;
+      transform ? : Function;
+    }): Collection < T > ;
+  }
+  interface Collection < T > {
+    allow(options: {
+      insert ? : (userId: string, doc: T) => boolean;
+      update ? : (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+      remove ? : (userId: string, doc: T) => boolean;
+      fetch ? : string[];
+      transform ? : Function;
+    }): boolean;
+    deny(options: {
+      insert ? : (userId: string, doc: T) => boolean;
+      update ? : (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+      remove ? : (userId: string, doc: T) => boolean;
+      fetch ? : string[];
+      transform ? : Function;
+    }): boolean;
+    find(selector ? : Selector | ObjectID | string, options ? : {
+      sort ? : SortSpecifier;
+      skip ? : number;
+      limit ? : number;
+      fields ? : FieldSpecifier;
+      reactive ? : boolean;
+      transform ? : Function;
+    }): Cursor < T > ;
+    findOne(selector ? : Selector | ObjectID | string, options ? : {
+      sort ? : SortSpecifier;
+      skip ? : number;
+      fields ? : FieldSpecifier;
+      reactive ? : boolean;
+      transform ? : Function;
+    }): T;
+    insert(doc: T, callback ? : Function): string;
+    rawCollection(): any;
+    rawDatabase(): any;
+    remove(selector: Selector | ObjectID | string, callback ? : Function): number;
+    update(selector: Selector | ObjectID | string, modifier: Modifier, options ? : {
+      multi ? : boolean;
+      upsert ? : boolean;
+    }, callback ? : Function): number;
+    upsert(selector: Selector | ObjectID | string, modifier: Modifier, options ? : {
+      multi ? : boolean;
+    }, callback ? : Function): {
+      numberAffected ? : number;insertedId ? : string;
+    };
+    _ensureIndex(indexName: string, options ? : {
+      [key: string]: any
+    }): void;
+  }
+
+  var Cursor: CursorStatic;
+  interface CursorStatic {
+    new < T > (): Cursor < T > ;
+  }
+  interface ObserveCallbacks {
+    added ? (document: Object) : void;
+    addedAt ? (document: Object, atIndex: number, before: Object) : void;
+    changed ? (newDocument: Object, oldDocument: Object) : void;
+    changedAt ? (newDocument: Object, oldDocument: Object, indexAt: number) : void;
+    removed ? (oldDocument: Object) : void;
+    removedAt ? (oldDocument: Object, atIndex: number) : void;
+    movedTo ? (document: Object, fromIndex: number, toIndex: number, before: Object) : void;
+  }
+  interface ObserveChangesCallbacks {
+    added ? (id: string, fields: Object) : void;
+    addedBefore ? (id: string, fields: Object, before: Object) : void;
+    changed ? (id: string, fields: Object) : void;
+    movedBefore ? (id: string, before: Object) : void;
+    removed ? (id: string) : void;
+  }
+  interface Cursor < T > {
+    count(): number;
+    fetch(): Array < T > ;
+    forEach(callback: < T > (doc: T, index: number, cursor: Cursor < T > ) => void, thisArg ? : any): void;
+    map < U > (callback: (doc: T, index: number, cursor: Cursor < T > ) => U, thisArg ? : any): Array < U > ;
+    observe(callbacks: ObserveCallbacks): Meteor.LiveQueryHandle;
+    observeChanges(callbacks: ObserveChangesCallbacks): Meteor.LiveQueryHandle;
+  }
+
+  var ObjectID: ObjectIDStatic;
+  interface ObjectIDStatic {
+    new(hexString ? : string): ObjectID;
+  }
+  interface ObjectID {}
+}
+
+declare module "meteor/mongo" {
+  module Mongo {
+    interface Selector {
+      [key: string]: any;
+    }
+    interface Selector extends Object {}
+    interface Modifier {}
+    interface SortSpecifier {}
+    interface FieldSpecifier {
+      [id: string]: Number;
+    }
+
+    var Collection: CollectionStatic;
+    interface CollectionStatic {
+      new < T > (name: string, options ? : {
+        connection ? : Object;
+        idGeneration ? : string;
+        transform ? : Function;
+      }): Collection < T > ;
+    }
+    interface Collection < T > {
+      allow(options: {
+        insert ? : (userId: string, doc: T) => boolean;
+        update ? : (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+        remove ? : (userId: string, doc: T) => boolean;
+        fetch ? : string[];
+        transform ? : Function;
+      }): boolean;
+      deny(options: {
+        insert ? : (userId: string, doc: T) => boolean;
+        update ? : (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+        remove ? : (userId: string, doc: T) => boolean;
+        fetch ? : string[];
+        transform ? : Function;
+      }): boolean;
+      find(selector ? : Selector | ObjectID | string, options ? : {
+        sort ? : SortSpecifier;
+        skip ? : number;
+        limit ? : number;
+        fields ? : FieldSpecifier;
+        reactive ? : boolean;
+        transform ? : Function;
+      }): Cursor < T > ;
+      findOne(selector ? : Selector | ObjectID | string, options ? : {
+        sort ? : SortSpecifier;
+        skip ? : number;
+        fields ? : FieldSpecifier;
+        reactive ? : boolean;
+        transform ? : Function;
+      }): T;
+      insert(doc: T, callback ? : Function): string;
+      rawCollection(): any;
+      rawDatabase(): any;
+      remove(selector: Selector | ObjectID | string, callback ? : Function): number;
+      update(selector: Selector | ObjectID | string, modifier: Modifier, options ? : {
+        multi ? : boolean;
+        upsert ? : boolean;
+      }, callback ? : Function): number;
+      upsert(selector: Selector | ObjectID | string, modifier: Modifier, options ? : {
+        multi ? : boolean;
+      }, callback ? : Function): {
+        numberAffected ? : number;insertedId ? : string;
+      };
+      _ensureIndex(indexName: string, options ? : {
+        [key: string]: any
+      }): void;
+    }
+
+    var Cursor: CursorStatic;
+    interface CursorStatic {
+      new < T > (): Cursor < T > ;
+    }
+    interface ObserveCallbacks {
+      added ? (document: Object) : void;
+      addedAt ? (document: Object, atIndex: number, before: Object) : void;
+      changed ? (newDocument: Object, oldDocument: Object) : void;
+      changedAt ? (newDocument: Object, oldDocument: Object, indexAt: number) : void;
+      removed ? (oldDocument: Object) : void;
+      removedAt ? (oldDocument: Object, atIndex: number) : void;
+      movedTo ? (document: Object, fromIndex: number, toIndex: number, before: Object) : void;
+    }
+    interface ObserveChangesCallbacks {
+      added ? (id: string, fields: Object) : void;
+      addedBefore ? (id: string, fields: Object, before: Object) : void;
+      changed ? (id: string, fields: Object) : void;
+      movedBefore ? (id: string, before: Object) : void;
+      removed ? (id: string) : void;
+    }
+    interface Cursor < T > {
+      count(): number;
+      fetch(): Array < T > ;
+      forEach(callback: < T > (doc: T, index: number, cursor: Cursor < T > ) => void, thisArg ? : any): void;
+      map < U > (callback: (doc: T, index: number, cursor: Cursor < T > ) => U, thisArg ? : any): Array < U > ;
+      observe(callbacks: ObserveCallbacks): Meteor.LiveQueryHandle;
+      observeChanges(callbacks: ObserveChangesCallbacks): Meteor.LiveQueryHandle;
+    }
+
+    var ObjectID: ObjectIDStatic;
+    interface ObjectIDStatic {
+      new(hexString ? : string): ObjectID;
+    }
+    interface ObjectID {}
+  }
+}
+declare module Mongo {
+  interface AllowDenyOptions {
+    insert ? : (userId: string, doc: any) => boolean;
+    update ? : (userId: string, doc: any, fieldNames: string[], modifier: any) => boolean;
+    remove ? : (userId: string, doc: any) => boolean;
+    fetch ? : string[];
+    transform ? : Function;
+  }
+}
+
+declare module "meteor/mongo" {
+  module Mongo {
+    interface AllowDenyOptions {
+      insert ? : (userId: string, doc: any) => boolean;
+      update ? : (userId: string, doc: any, fieldNames: string[], modifier: any) => boolean;
+      remove ? : (userId: string, doc: any) => boolean;
+      fetch ? : string[];
+      transform ? : Function;
+    }
+  }
+}
+declare module Random {
+  function id(numberOfChars ? : number): string;
+
+  function secret(numberOfChars ? : number): string;
+
+  function fraction(): number;
+  // @param numberOfDigits, @returns a random hex string of the given length
+  function hexString(numberOfDigits: number): string;
+  // @param array, @return a random element in array
+  function choice(array: any[]): string;
+  // @param str, @return a random char in str
+  function choice(str: string): string;
+}
+
+declare module "meteor/random" {
+  module Random {
+    function id(numberOfChars ? : number): string;
+
+    function secret(numberOfChars ? : number): string;
+
+    function fraction(): number;
+    // @param numberOfDigits, @returns a random hex string of the given length
+    function hexString(numberOfDigits: number): string;
+    // @param array, @return a random element in array
+    function choice(array: any[]): string;
+    // @param str, @return a random char in str
+    function choice(str: string): string;
+  }
+}
+declare var ReactiveVar: ReactiveVarStatic;
+interface ReactiveVarStatic {
+  new < T > (initialValue: T, equalsFunc ? : Function): ReactiveVar < T > ;
+}
+interface ReactiveVar < T > {
+  get(): T;
+  set(newValue: T): void;
+}
+
+declare module "meteor/reactive-var" {
+  var ReactiveVar: ReactiveVarStatic;
+  interface ReactiveVarStatic {
+    new < T > (initialValue: T, equalsFunc ? : Function): ReactiveVar < T > ;
+  }
+  interface ReactiveVar < T > {
+    get(): T;
+    set(newValue: T): void;
+  }
+}
+
+declare module Session {
+  function equals(key: string, value: string | number | boolean | any): boolean;
+
+  function get(key: string): any;
+
+  function set(key: string, value: EJSONable | any): void;
+
+  function setDefault(key: string, value: EJSONable | any): void;
+}
+
+declare module "meteor/session" {
+  /// <reference path="ejson.d.ts" />
+
+  module Session {
+    function equals(key: string, value: string | number | boolean | any): boolean;
+
+    function get(key: string): any;
+
+    function set(key: string, value: EJSONable | any): void;
+
+    function setDefault(key: string, value: EJSONable | any): void;
+  }
+}
+
+declare var Template: TemplateStatic;
+interface TemplateStatic extends Blaze.TemplateStatic {
+  new(viewName ? : string, renderFunction ? : Function): Blaze.Template;
+  body: Blaze.Template;
+  [index: string]: any | Blaze.Template;
+}
+
+declare module "meteor/templating" {
+  /// <reference path="blaze.d.ts" />
+
+  var Template: TemplateStatic;
+  interface TemplateStatic extends Blaze.TemplateStatic {
+    new(viewName ? : string, renderFunction ? : Function): Blaze.Template;
+    body: Blaze.Template;
+    [index: string]: any | Blaze.Template;
+  }
+}
+interface ILengthAble {
+  length: number;
+}
+
+interface ITinytestAssertions {
+  ok(doc: Object): void;
+  expect_fail(): void;
+  fail(doc: Object): void;
+  runId(): string;
+  equal < T > (actual: T, expected: T, message ? : string, not ? : boolean): void;
+  notEqual < T > (actual: T, expected: T, message ? : string): void;
+  instanceOf(obj: Object, klass: Function, message ? : string): void;
+  notInstanceOf(obj: Object, klass: Function, message ? : string): void;
+  matches(actual: any, regexp: RegExp, message ? : string): void;
+  notMatches(actual: any, regexp: RegExp, message ? : string): void;
+  throws(f: Function, expected ? : string | RegExp): void;
+  isTrue(v: boolean, msg ? : string): void;
+  isFalse(v: boolean, msg ? : string): void;
+  isNull(v: any, msg ? : string): void;
+  isNotNull(v: any, msg ? : string): void;
+  isUndefined(v: any, msg ? : string): void;
+  isNotUndefined(v: any, msg ? : string): void;
+  isNan(v: any, msg ? : string): void;
+  isNotNan(v: any, msg ? : string): void;
+  include < T > (s: Array < T > | Object | string, value: any, msg ? : string, not ? : boolean): void;
+
+  notInclude < T > (s: Array < T > | Object | string, value: any, msg ? : string, not ? : boolean): void;
+  length(obj: ILengthAble, expected_length: number, msg ? : string): void;
+  _stringEqual(actual: string, expected: string, msg ? : string): void;
+}
+
+declare module Tinytest {
+  function add(description: string, func: (test: ITinytestAssertions) => void): void;
+
+  function addAsync(description: string, func: (test: ITinytestAssertions) => void): void;
+}
+
+declare module "meteor/tiny-test" {
+  interface ILengthAble {
+    length: number;
+  }
+
+  interface ITinytestAssertions {
+    ok(doc: Object): void;
+    expect_fail(): void;
+    fail(doc: Object): void;
+    runId(): string;
+    equal < T > (actual: T, expected: T, message ? : string, not ? : boolean): void;
+    notEqual < T > (actual: T, expected: T, message ? : string): void;
+    instanceOf(obj: Object, klass: Function, message ? : string): void;
+    notInstanceOf(obj: Object, klass: Function, message ? : string): void;
+    matches(actual: any, regexp: RegExp, message ? : string): void;
+    notMatches(actual: any, regexp: RegExp, message ? : string): void;
+    throws(f: Function, expected ? : string | RegExp): void;
+    isTrue(v: boolean, msg ? : string): void;
+    isFalse(v: boolean, msg ? : string): void;
+    isNull(v: any, msg ? : string): void;
+    isNotNull(v: any, msg ? : string): void;
+    isUndefined(v: any, msg ? : string): void;
+    isNotUndefined(v: any, msg ? : string): void;
+    isNan(v: any, msg ? : string): void;
+    isNotNan(v: any, msg ? : string): void;
+    include < T > (s: Array < T > | Object | string, value: any, msg ? : string, not ? : boolean): void;
+
+    notInclude < T > (s: Array < T > | Object | string, value: any, msg ? : string, not ? : boolean): void;
+    length(obj: ILengthAble, expected_length: number, msg ? : string): void;
+    _stringEqual(actual: string, expected: string, msg ? : string): void;
+  }
+
+  module Tinytest {
+    function add(description: string, func: (test: ITinytestAssertions) => void): void;
+
+    function addAsync(description: string, func: (test: ITinytestAssertions) => void): void;
+  }
+}
+declare module App {
+  function accessRule(pattern: string, options ? : {
+    type ? : string;
+    launchExternal ? : boolean;
+  }): void;
+
+  function configurePlugin(id: string, config: Object): void;
+
+  function icons(icons: Object): void;
+
+  function info(options: {
+    id ? : string;
+    version ? : string;
+    name ? : string;
+    description ? : string;
+    author ? : string;
+    email ? : string;
+    website ? : string;
+  }): void;
+
+  function launchScreens(launchScreens: Object): void;
+
+  function setPreference(name: string, value: string, platform ? : string): void;
+}
+
+declare function execFileAsync(command: string, args ? : any[], options ? : {
+  cwd ? : Object;
+  env ? : Object;
+  stdio ? : any[] | string;
+  destination ? : any;
+  waitForClose ? : string;
+}): any;
+declare function execFileSync(command: string, args ? : any[], options ? : {
+  cwd ? : Object;
+  env ? : Object;
+  stdio ? : any[] | string;
+  destination ? : any;
+  waitForClose ? : string;
+}): String;
+
+declare module Assets {
+  function getBinary(assetPath: string, asyncCallback ? : Function): EJSON;
+
+  function getText(assetPath: string, asyncCallback ? : Function): string;
+}
+
+declare module Cordova {
+  function depends(dependencies: {
+    [id: string]: string
+  }): void;
+}
+
+declare module Npm {
+  function depends(dependencies: {
+    [id: string]: string
+  }): void;
+
+  function require(name: string): any;
+}
+
+declare namespace Package {
+  function describe(options: {
+    summary ? : string;
+    version ? : string;
+    name ? : string;
+    git ? : string;
+    documentation ? : string;
+    debugOnly ? : boolean;
+    prodOnly ? : boolean;
+    testOnly ? : boolean;
+  }): void;
+
+  function onTest(func: (api: PackageAPI) => void): void;
+
+  function onUse(func: (api: PackageAPI) => void): void;
+
+  function registerBuildPlugin(options ? : {
+    name ? : string;
+    use ? : string | string[];
+    sources ? : string[];
+    npmDependencies ? : Object;
+  }): void;
+}
+
+interface PackageAPI {
+  new(): PackageAPI;
+  addAssets(filenames: string | string[], architecture: string | string[]): void;
+  addFiles(filenames: string | string[], architecture ? : string | string[], options ? : {
+    bare ? : boolean;
+  }): void;
+  export (exportedObjects: string | string[], architecture ? : string | string[], exportOptions ? : Object, testOnly ? : boolean): void;
+  imply(packageNames: string | string[], architecture ? : string | string[]): void;
+  use(packageNames: string | string[], architecture ? : string | string[], options ? : {
+    weak ? : boolean;
+    unordered ? : boolean;
+  }): void;
+  versionsFrom(meteorRelease: string | string[]): void;
+}
+
+declare var console: Console;
+
+declare module "meteor/tools" {
+  module App {
+    function accessRule(pattern: string, options ? : {
+      type ? : string;
+      launchExternal ? : boolean;
+    }): void;
+
+    function configurePlugin(id: string, config: Object): void;
+
+    function icons(icons: Object): void;
+
+    function info(options: {
+      id ? : string;
+      version ? : string;
+      name ? : string;
+      description ? : string;
+      author ? : string;
+      email ? : string;
+      website ? : string;
+    }): void;
+
+    function launchScreens(launchScreens: Object): void;
+
+    function setPreference(name: string, value: string, platform ? : string): void;
+  }
+
+  function execFileAsync(command: string, args ? : any[], options ? : {
+    cwd ? : Object;
+    env ? : Object;
+    stdio ? : any[] | string;
+    destination ? : any;
+    waitForClose ? : string;
+  }): any;
+
+  function execFileSync(command: string, args ? : any[], options ? : {
+    cwd ? : Object;
+    env ? : Object;
+    stdio ? : any[] | string;
+    destination ? : any;
+    waitForClose ? : string;
+  }): String;
+
+  module Assets {
+    function getBinary(assetPath: string, asyncCallback ? : Function): EJSON;
+
+    function getText(assetPath: string, asyncCallback ? : Function): string;
+  }
+
+  module Cordova {
+    function depends(dependencies: {
+      [id: string]: string
+    }): void;
+  }
+
+  module Npm {
+    function depends(dependencies: {
+      [id: string]: string
+    }): void;
+
+    function require(name: string): any;
+  }
+
+  namespace Package {
+    function describe(options: {
+      summary ? : string;
+      version ? : string;
+      name ? : string;
+      git ? : string;
+      documentation ? : string;
+      debugOnly ? : boolean;
+      prodOnly ? : boolean;
+      testOnly ? : boolean;
+    }): void;
+
+    function onTest(func: (api: PackageAPI) => void): void;
+
+    function onUse(func: (api: PackageAPI) => void): void;
+
+    function registerBuildPlugin(options ? : {
+      name ? : string;
+      use ? : string | string[];
+      sources ? : string[];
+      npmDependencies ? : Object;
+    }): void;
+  }
+
+  interface PackageAPI {
+    new(): PackageAPI;
+    addAssets(filenames: string | string[], architecture: string | string[]): void;
+    addFiles(filenames: string | string[], architecture ? : string | string[], options ? : {
+      bare ? : boolean;
+    }): void;
+    export (exportedObjects: string | string[], architecture ? : string | string[], exportOptions ? : Object, testOnly ? : boolean): void;
+    imply(packageNames: string | string[], architecture ? : string | string[]): void;
+    use(packageNames: string | string[], architecture ? : string | string[], options ? : {
+      weak ? : boolean;
+      unordered ? : boolean;
+    }): void;
+    versionsFrom(meteorRelease: string | string[]): void;
+  }
+
+  var console: Console;
+}
+declare module Tracker {
+  function Computation(): void;
+  interface Computation {
+    firstRun: boolean;
+    invalidate(): void;
+    invalidated: boolean;
+    onInvalidate(callback: Function): void;
+    onStop(callback: Function): void;
+    stop(): void;
+    stopped: boolean;
+  }
+  var currentComputation: Computation;
+
+  var Dependency: DependencyStatic;
+  interface DependencyStatic {
+    new(): Dependency;
+  }
+  interface Dependency {
+    changed(): void;
+    depend(fromComputation ? : Computation): boolean;
+    hasDependents(): boolean;
+  }
+
+  var active: boolean;
+
+  function afterFlush(callback: Function): void;
+
+  function autorun(runFunc: (computation: Computation) => void, options ? : {
+    onError ? : Function;
+  }): Computation;
+
+  function flush(): void;
+
+  function nonreactive(func: Function): void;
+
+  function onInvalidate(callback: Function): void;
+}
+
+declare module "meteor/tracker" {
+  module Tracker {
+    function Computation(): void;
+    interface Computation {
+      firstRun: boolean;
+      invalidate(): void;
+      invalidated: boolean;
+      onInvalidate(callback: Function): void;
+      onStop(callback: Function): void;
+      stop(): void;
+      stopped: boolean;
+    }
+    var currentComputation: Computation;
+
+    var Dependency: DependencyStatic;
+    interface DependencyStatic {
+      new(): Dependency;
+    }
+    interface Dependency {
+      changed(): void;
+      depend(fromComputation ? : Computation): boolean;
+      hasDependents(): boolean;
+    }
+
+    var active: boolean;
+
+    function afterFlush(callback: Function): void;
+
+    function autorun(runFunc: (computation: Computation) => void, options ? : {
+      onError ? : Function;
+    }): Computation;
+
+    function flush(): void;
+
+    function nonreactive(func: Function): void;
+
+    function onInvalidate(callback: Function): void;
+  }
+}
\ No newline at end of file
diff --git a/README.md b/README.md
index a212293..d32f876 100644
--- a/README.md
+++ b/README.md
@@ -8,4 +8,4 @@ Learn how to build this app by following the [Meteor Tutorial](http://www.meteor
 
 Read more about building apps with Meteor in the [Meteor Guide](http://guide.meteor.com).
 
-![screenshot](screenshot.png)
\ No newline at end of file
+![screenshot](screenshot.png)
diff --git a/client/main.css b/client/main.css
new file mode 100644
index 0000000..7f354f0
--- /dev/null
+++ b/client/main.css
@@ -0,0 +1,4 @@
+body {
+  padding: 10px;
+  font-family: sans-serif;
+}
diff --git a/client/main.html b/client/main.html
new file mode 100644
index 0000000..15a7c7d
--- /dev/null
+++ b/client/main.html
@@ -0,0 +1,25 @@
+<head>
+  <title>simple-todos</title>
+</head>
+
+<body>
+  <h1>Welcome to Meteor!</h1>
+
+  {{> hello}}
+  {{> info}}
+</body>
+
+<template name="hello">
+  <button>Click Me</button>
+  <p>You've pressed the button {{counter}} times.</p>
+</template>
+
+<template name="info">
+  <h2>Learn Meteor!</h2>
+  <ul>
+    <li><a href="https://www.meteor.com/try" target="_blank">Do the Tutorial</a></li>
+    <li><a href="http://guide.meteor.com" target="_blank">Follow the Guide</a></li>
+    <li><a href="https://docs.meteor.com" target="_blank">Read the Docs</a></li>
+    <li><a href="https://forums.meteor.com" target="_blank">Discussions</a></li>
+  </ul>
+</template>
diff --git a/client/main.js b/client/main.js
new file mode 100644
index 0000000..ecb3282
--- /dev/null
+++ b/client/main.js
@@ -0,0 +1,22 @@
+import { Template } from 'meteor/templating';
+import { ReactiveVar } from 'meteor/reactive-var';
+
+import './main.html';
+
+Template.hello.onCreated(function helloOnCreated() {
+  // counter starts at 0
+  this.counter = new ReactiveVar(0);
+});
+
+Template.hello.helpers({
+  counter() {
+    return Template.instance().counter.get();
+  },
+});
+
+Template.hello.events({
+  'click button'(event, instance) {
+    // increment the counter when button is clicked
+    instance.counter.set(instance.counter.get() + 1);
+  },
+});
diff --git a/package-lock.json b/package-lock.json
new file mode 100644
index 0000000..d78ee75
--- /dev/null
+++ b/package-lock.json
@@ -0,0 +1,586 @@
+{
+  "name": "simple-todos",
+  "requires": true,
+  "lockfileVersion": 1,
+  "dependencies": {
+    "@babel/runtime": {
+      "version": "7.8.7",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.8.7.tgz",
+      "integrity": "sha512-+AATMUFppJDw6aiR5NVPHqIQBlV/Pj8wY/EZH+lmvRdUo9xBaz/rF3alAwFJQavvKfeOlPE7oaaDHVbcySbCsg==",
+      "requires": {
+        "regenerator-runtime": "^0.13.4"
+      }
+    },
+    "jquery": {
+      "version": "3.4.1",
+      "resolved": "https://registry.npmjs.org/jquery/-/jquery-3.4.1.tgz",
+      "integrity": "sha512-36+AdBzCL+y6qjw5Tx7HgzeGCzC81MDDgaUP8ld2zhx58HdqXGoBd+tHdrBMiyjGQs0Hxs/MLZTu/eHNJJuWPw=="
+    },
+    "meteor-node-stubs": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/meteor-node-stubs/-/meteor-node-stubs-1.0.0.tgz",
+      "integrity": "sha512-QJwyv23wyXD3uEMzk5Xr/y5ezoVlCbHvBbrgdkVadn84dmifLRbs0PtD6EeNw5NLIk+SQSfxld7IMdEsneGz5w==",
+      "requires": {
+        "assert": "^1.4.1",
+        "browserify-zlib": "^0.2.0",
+        "buffer": "^5.2.1",
+        "console-browserify": "^1.1.0",
+        "constants-browserify": "^1.0.0",
+        "crypto-browserify": "^3.12.0",
+        "domain-browser": "^1.2.0",
+        "events": "^3.0.0",
+        "https-browserify": "^1.0.0",
+        "os-browserify": "^0.3.0",
+        "path-browserify": "^1.0.0",
+        "process": "^0.11.10",
+        "punycode": "^2.1.1",
+        "querystring-es3": "^0.2.1",
+        "readable-stream": "^3.3.0",
+        "stream-browserify": "^2.0.2",
+        "stream-http": "^3.0.0",
+        "string_decoder": "^1.2.0",
+        "timers-browserify": "^2.0.10",
+        "tty-browserify": "0.0.1",
+        "url": "^0.11.0",
+        "util": "^0.11.1",
+        "vm-browserify": "^1.1.0"
+      },
+      "dependencies": {
+        "asn1.js": {
+          "version": "4.10.1",
+          "bundled": true,
+          "requires": {
+            "bn.js": "^4.0.0",
+            "inherits": "^2.0.1",
+            "minimalistic-assert": "^1.0.0"
+          }
+        },
+        "assert": {
+          "version": "1.4.1",
+          "bundled": true,
+          "requires": {
+            "util": "0.10.3"
+          },
+          "dependencies": {
+            "util": {
+              "version": "0.10.3",
+              "bundled": true,
+              "requires": {
+                "inherits": "2.0.1"
+              }
+            }
+          }
+        },
+        "base64-js": {
+          "version": "1.3.0",
+          "bundled": true
+        },
+        "bn.js": {
+          "version": "4.11.8",
+          "bundled": true
+        },
+        "brorand": {
+          "version": "1.1.0",
+          "bundled": true
+        },
+        "browserify-aes": {
+          "version": "1.2.0",
+          "bundled": true,
+          "requires": {
+            "buffer-xor": "^1.0.3",
+            "cipher-base": "^1.0.0",
+            "create-hash": "^1.1.0",
+            "evp_bytestokey": "^1.0.3",
+            "inherits": "^2.0.1",
+            "safe-buffer": "^5.0.1"
+          }
+        },
+        "browserify-cipher": {
+          "version": "1.0.1",
+          "bundled": true,
+          "requires": {
+            "browserify-aes": "^1.0.4",
+            "browserify-des": "^1.0.0",
+            "evp_bytestokey": "^1.0.0"
+          }
+        },
+        "browserify-des": {
+          "version": "1.0.2",
+          "bundled": true,
+          "requires": {
+            "cipher-base": "^1.0.1",
+            "des.js": "^1.0.0",
+            "inherits": "^2.0.1",
+            "safe-buffer": "^5.1.2"
+          }
+        },
+        "browserify-rsa": {
+          "version": "4.0.1",
+          "bundled": true,
+          "requires": {
+            "bn.js": "^4.1.0",
+            "randombytes": "^2.0.1"
+          }
+        },
+        "browserify-sign": {
+          "version": "4.0.4",
+          "bundled": true,
+          "requires": {
+            "bn.js": "^4.1.1",
+            "browserify-rsa": "^4.0.0",
+            "create-hash": "^1.1.0",
+            "create-hmac": "^1.1.2",
+            "elliptic": "^6.0.0",
+            "inherits": "^2.0.1",
+            "parse-asn1": "^5.0.0"
+          }
+        },
+        "browserify-zlib": {
+          "version": "0.2.0",
+          "bundled": true,
+          "requires": {
+            "pako": "~1.0.5"
+          }
+        },
+        "buffer": {
+          "version": "5.2.1",
+          "bundled": true,
+          "requires": {
+            "base64-js": "^1.0.2",
+            "ieee754": "^1.1.4"
+          }
+        },
+        "buffer-xor": {
+          "version": "1.0.3",
+          "bundled": true
+        },
+        "builtin-status-codes": {
+          "version": "3.0.0",
+          "bundled": true
+        },
+        "cipher-base": {
+          "version": "1.0.4",
+          "bundled": true,
+          "requires": {
+            "inherits": "^2.0.1",
+            "safe-buffer": "^5.0.1"
+          }
+        },
+        "console-browserify": {
+          "version": "1.1.0",
+          "bundled": true,
+          "requires": {
+            "date-now": "^0.1.4"
+          }
+        },
+        "constants-browserify": {
+          "version": "1.0.0",
+          "bundled": true
+        },
+        "core-util-is": {
+          "version": "1.0.2",
+          "bundled": true
+        },
+        "create-ecdh": {
+          "version": "4.0.3",
+          "bundled": true,
+          "requires": {
+            "bn.js": "^4.1.0",
+            "elliptic": "^6.0.0"
+          }
+        },
+        "create-hash": {
+          "version": "1.2.0",
+          "bundled": true,
+          "requires": {
+            "cipher-base": "^1.0.1",
+            "inherits": "^2.0.1",
+            "md5.js": "^1.3.4",
+            "ripemd160": "^2.0.1",
+            "sha.js": "^2.4.0"
+          }
+        },
+        "create-hmac": {
+          "version": "1.1.7",
+          "bundled": true,
+          "requires": {
+            "cipher-base": "^1.0.3",
+            "create-hash": "^1.1.0",
+            "inherits": "^2.0.1",
+            "ripemd160": "^2.0.0",
+            "safe-buffer": "^5.0.1",
+            "sha.js": "^2.4.8"
+          }
+        },
+        "crypto-browserify": {
+          "version": "3.12.0",
+          "bundled": true,
+          "requires": {
+            "browserify-cipher": "^1.0.0",
+            "browserify-sign": "^4.0.0",
+            "create-ecdh": "^4.0.0",
+            "create-hash": "^1.1.0",
+            "create-hmac": "^1.1.0",
+            "diffie-hellman": "^5.0.0",
+            "inherits": "^2.0.1",
+            "pbkdf2": "^3.0.3",
+            "public-encrypt": "^4.0.0",
+            "randombytes": "^2.0.0",
+            "randomfill": "^1.0.3"
+          }
+        },
+        "date-now": {
+          "version": "0.1.4",
+          "bundled": true
+        },
+        "des.js": {
+          "version": "1.0.0",
+          "bundled": true,
+          "requires": {
+            "inherits": "^2.0.1",
+            "minimalistic-assert": "^1.0.0"
+          }
+        },
+        "diffie-hellman": {
+          "version": "5.0.3",
+          "bundled": true,
+          "requires": {
+            "bn.js": "^4.1.0",
+            "miller-rabin": "^4.0.0",
+            "randombytes": "^2.0.0"
+          }
+        },
+        "domain-browser": {
+          "version": "1.2.0",
+          "bundled": true
+        },
+        "elliptic": {
+          "version": "6.4.1",
+          "bundled": true,
+          "requires": {
+            "bn.js": "^4.4.0",
+            "brorand": "^1.0.1",
+            "hash.js": "^1.0.0",
+            "hmac-drbg": "^1.0.0",
+            "inherits": "^2.0.1",
+            "minimalistic-assert": "^1.0.0",
+            "minimalistic-crypto-utils": "^1.0.0"
+          }
+        },
+        "events": {
+          "version": "3.0.0",
+          "bundled": true
+        },
+        "evp_bytestokey": {
+          "version": "1.0.3",
+          "bundled": true,
+          "requires": {
+            "md5.js": "^1.3.4",
+            "safe-buffer": "^5.1.1"
+          }
+        },
+        "hash-base": {
+          "version": "3.0.4",
+          "bundled": true,
+          "requires": {
+            "inherits": "^2.0.1",
+            "safe-buffer": "^5.0.1"
+          }
+        },
+        "hash.js": {
+          "version": "1.1.7",
+          "bundled": true,
+          "requires": {
+            "inherits": "^2.0.3",
+            "minimalistic-assert": "^1.0.1"
+          },
+          "dependencies": {
+            "inherits": {
+              "version": "2.0.3",
+              "bundled": true
+            }
+          }
+        },
+        "hmac-drbg": {
+          "version": "1.0.1",
+          "bundled": true,
+          "requires": {
+            "hash.js": "^1.0.3",
+            "minimalistic-assert": "^1.0.0",
+            "minimalistic-crypto-utils": "^1.0.1"
+          }
+        },
+        "https-browserify": {
+          "version": "1.0.0",
+          "bundled": true
+        },
+        "ieee754": {
+          "version": "1.1.13",
+          "bundled": true
+        },
+        "inherits": {
+          "version": "2.0.1",
+          "bundled": true
+        },
+        "isarray": {
+          "version": "1.0.0",
+          "bundled": true
+        },
+        "md5.js": {
+          "version": "1.3.5",
+          "bundled": true,
+          "requires": {
+            "hash-base": "^3.0.0",
+            "inherits": "^2.0.1",
+            "safe-buffer": "^5.1.2"
+          }
+        },
+        "miller-rabin": {
+          "version": "4.0.1",
+          "bundled": true,
+          "requires": {
+            "bn.js": "^4.0.0",
+            "brorand": "^1.0.1"
+          }
+        },
+        "minimalistic-assert": {
+          "version": "1.0.1",
+          "bundled": true
+        },
+        "minimalistic-crypto-utils": {
+          "version": "1.0.1",
+          "bundled": true
+        },
+        "os-browserify": {
+          "version": "0.3.0",
+          "bundled": true
+        },
+        "pako": {
+          "version": "1.0.10",
+          "bundled": true
+        },
+        "parse-asn1": {
+          "version": "5.1.4",
+          "bundled": true,
+          "requires": {
+            "asn1.js": "^4.0.0",
+            "browserify-aes": "^1.0.0",
+            "create-hash": "^1.1.0",
+            "evp_bytestokey": "^1.0.0",
+            "pbkdf2": "^3.0.3",
+            "safe-buffer": "^5.1.1"
+          }
+        },
+        "path-browserify": {
+          "version": "1.0.0",
+          "bundled": true
+        },
+        "pbkdf2": {
+          "version": "3.0.17",
+          "bundled": true,
+          "requires": {
+            "create-hash": "^1.1.2",
+            "create-hmac": "^1.1.4",
+            "ripemd160": "^2.0.1",
+            "safe-buffer": "^5.0.1",
+            "sha.js": "^2.4.8"
+          }
+        },
+        "process": {
+          "version": "0.11.10",
+          "bundled": true
+        },
+        "process-nextick-args": {
+          "version": "2.0.0",
+          "bundled": true
+        },
+        "public-encrypt": {
+          "version": "4.0.3",
+          "bundled": true,
+          "requires": {
+            "bn.js": "^4.1.0",
+            "browserify-rsa": "^4.0.0",
+            "create-hash": "^1.1.0",
+            "parse-asn1": "^5.0.0",
+            "randombytes": "^2.0.1",
+            "safe-buffer": "^5.1.2"
+          }
+        },
+        "punycode": {
+          "version": "2.1.1",
+          "bundled": true
+        },
+        "querystring": {
+          "version": "0.2.0",
+          "bundled": true
+        },
+        "querystring-es3": {
+          "version": "0.2.1",
+          "bundled": true
+        },
+        "randombytes": {
+          "version": "2.1.0",
+          "bundled": true,
+          "requires": {
+            "safe-buffer": "^5.1.0"
+          }
+        },
+        "randomfill": {
+          "version": "1.0.4",
+          "bundled": true,
+          "requires": {
+            "randombytes": "^2.0.5",
+            "safe-buffer": "^5.1.0"
+          }
+        },
+        "readable-stream": {
+          "version": "3.3.0",
+          "bundled": true,
+          "requires": {
+            "inherits": "^2.0.3",
+            "string_decoder": "^1.1.1",
+            "util-deprecate": "^1.0.1"
+          },
+          "dependencies": {
+            "inherits": {
+              "version": "2.0.3",
+              "bundled": true
+            }
+          }
+        },
+        "ripemd160": {
+          "version": "2.0.2",
+          "bundled": true,
+          "requires": {
+            "hash-base": "^3.0.0",
+            "inherits": "^2.0.1"
+          }
+        },
+        "safe-buffer": {
+          "version": "5.1.2",
+          "bundled": true
+        },
+        "setimmediate": {
+          "version": "1.0.5",
+          "bundled": true
+        },
+        "sha.js": {
+          "version": "2.4.11",
+          "bundled": true,
+          "requires": {
+            "inherits": "^2.0.1",
+            "safe-buffer": "^5.0.1"
+          }
+        },
+        "stream-browserify": {
+          "version": "2.0.2",
+          "bundled": true,
+          "requires": {
+            "inherits": "~2.0.1",
+            "readable-stream": "^2.0.2"
+          },
+          "dependencies": {
+            "readable-stream": {
+              "version": "2.3.6",
+              "bundled": true,
+              "requires": {
+                "core-util-is": "~1.0.0",
+                "inherits": "~2.0.3",
+                "isarray": "~1.0.0",
+                "process-nextick-args": "~2.0.0",
+                "safe-buffer": "~5.1.1",
+                "string_decoder": "~1.1.1",
+                "util-deprecate": "~1.0.1"
+              },
+              "dependencies": {
+                "inherits": {
+                  "version": "2.0.3",
+                  "bundled": true
+                }
+              }
+            },
+            "string_decoder": {
+              "version": "1.1.1",
+              "bundled": true,
+              "requires": {
+                "safe-buffer": "~5.1.0"
+              }
+            }
+          }
+        },
+        "stream-http": {
+          "version": "3.0.0",
+          "bundled": true,
+          "requires": {
+            "builtin-status-codes": "^3.0.0",
+            "inherits": "^2.0.1",
+            "readable-stream": "^3.0.6",
+            "xtend": "^4.0.0"
+          }
+        },
+        "string_decoder": {
+          "version": "1.2.0",
+          "bundled": true,
+          "requires": {
+            "safe-buffer": "~5.1.0"
+          }
+        },
+        "timers-browserify": {
+          "version": "2.0.10",
+          "bundled": true,
+          "requires": {
+            "setimmediate": "^1.0.4"
+          }
+        },
+        "tty-browserify": {
+          "version": "0.0.1",
+          "bundled": true
+        },
+        "url": {
+          "version": "0.11.0",
+          "bundled": true,
+          "requires": {
+            "punycode": "1.3.2",
+            "querystring": "0.2.0"
+          },
+          "dependencies": {
+            "punycode": {
+              "version": "1.3.2",
+              "bundled": true
+            }
+          }
+        },
+        "util": {
+          "version": "0.11.1",
+          "bundled": true,
+          "requires": {
+            "inherits": "2.0.3"
+          },
+          "dependencies": {
+            "inherits": {
+              "version": "2.0.3",
+              "bundled": true
+            }
+          }
+        },
+        "util-deprecate": {
+          "version": "1.0.2",
+          "bundled": true
+        },
+        "vm-browserify": {
+          "version": "1.1.0",
+          "bundled": true
+        },
+        "xtend": {
+          "version": "4.0.1",
+          "bundled": true
+        }
+      }
+    },
+    "regenerator-runtime": {
+      "version": "0.13.4",
+      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.4.tgz",
+      "integrity": "sha512-plpwicqEzfEyTQohIKktWigcLzmNStMGwbOUbykx51/29Z3JOGYldaaNGK7ngNXV+UcoqvIMmloZ48Sr74sd+g=="
+    }
+  }
+}
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..f0c1811
--- /dev/null
+++ b/package.json
@@ -0,0 +1,22 @@
+{
+  "name": "simple-todos",
+  "private": true,
+  "scripts": {
+    "start": "meteor run",
+    "test": "meteor test --once --driver-package meteortesting:mocha",
+    "test-app": "TEST_WATCH=1 meteor test --full-app --driver-package meteortesting:mocha",
+    "visualize": "meteor --production --extra-packages bundle-visualizer"
+  },
+  "dependencies": {
+    "@babel/runtime": "^7.7.6",
+    "jquery": "^3.4.1",
+    "meteor-node-stubs": "^1.0.0"
+  },
+  "meteor": {
+    "mainModule": {
+      "client": "client/main.js",
+      "server": "server/main.js"
+    },
+    "testModule": "tests/main.js"
+  }
+}
diff --git a/server/main.js b/server/main.js
new file mode 100644
index 0000000..31a9e0e
--- /dev/null
+++ b/server/main.js
@@ -0,0 +1,5 @@
+import { Meteor } from 'meteor/meteor';
+
+Meteor.startup(() => {
+  // code to run on server at startup
+});
diff --git a/tests/main.js b/tests/main.js
new file mode 100644
index 0000000..973d17e
--- /dev/null
+++ b/tests/main.js
@@ -0,0 +1,20 @@
+import assert from "assert";
+
+describe("simple-todos", function () {
+  it("package.json has correct name", async function () {
+    const { name } = await import("../package.json");
+    assert.strictEqual(name, "simple-todos");
+  });
+
+  if (Meteor.isClient) {
+    it("client is not server", function () {
+      assert.strictEqual(Meteor.isServer, false);
+    });
+  }
+
+  if (Meteor.isServer) {
+    it("server is not client", function () {
+      assert.strictEqual(Meteor.isClient, false);
+    });
+  }
+});
-- 
2.11.0


From 611bb62ef87b58bcac339a4f09b575a42043f86a Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:33:25 -0600
Subject: [PATCH 02/49] Step 2.1: Remove starter HTML code

---
 client/main.html | 22 ----------------------
 1 file changed, 22 deletions(-)

diff --git a/client/main.html b/client/main.html
index 15a7c7d..135c0b2 100644
--- a/client/main.html
+++ b/client/main.html
@@ -1,25 +1,3 @@
 <head>
   <title>simple-todos</title>
 </head>
-
-<body>
-  <h1>Welcome to Meteor!</h1>
-
-  {{> hello}}
-  {{> info}}
-</body>
-
-<template name="hello">
-  <button>Click Me</button>
-  <p>You've pressed the button {{counter}} times.</p>
-</template>
-
-<template name="info">
-  <h2>Learn Meteor!</h2>
-  <ul>
-    <li><a href="https://www.meteor.com/try" target="_blank">Do the Tutorial</a></li>
-    <li><a href="http://guide.meteor.com" target="_blank">Follow the Guide</a></li>
-    <li><a href="https://docs.meteor.com" target="_blank">Read the Docs</a></li>
-    <li><a href="https://forums.meteor.com" target="_blank">Discussions</a></li>
-  </ul>
-</template>
-- 
2.11.0


From b61c90776940f059f47407e8a735a89687f3806c Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:36:09 -0600
Subject: [PATCH 03/49] Step 2.2: Add starter HTML code

---
 imports/ui/body.html | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)
 create mode 100644 imports/ui/body.html

diff --git a/imports/ui/body.html b/imports/ui/body.html
new file mode 100644
index 0000000..da9cc97
--- /dev/null
+++ b/imports/ui/body.html
@@ -0,0 +1,17 @@
+<body>
+    <div class="container">
+      <header>
+        <h1>Todo List</h1>
+      </header>
+  
+      <ul>
+        {{#each tasks}}
+          {{> task}}
+        {{/each}}
+      </ul>
+    </div>
+  </body>
+  
+  <template name="task">
+    <li>{{text}}</li>
+  </template>
\ No newline at end of file
-- 
2.11.0


From 2d21f980a180ceeacd110b1b9d83c424629cc416 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:36:54 -0600
Subject: [PATCH 04/49] Step 2.3: Add starter JS code

---
 imports/ui/body.js | 11 +++++++++++
 1 file changed, 11 insertions(+)
 create mode 100644 imports/ui/body.js

diff --git a/imports/ui/body.js b/imports/ui/body.js
new file mode 100644
index 0000000..4c3513b
--- /dev/null
+++ b/imports/ui/body.js
@@ -0,0 +1,11 @@
+import { Template } from 'meteor/templating';
+
+import './body.html';
+
+Template.body.helpers({
+  tasks: [
+    { text: 'This is task 1' },
+    { text: 'This is task 2' },
+    { text: 'This is task 3' },
+  ],
+});
\ No newline at end of file
-- 
2.11.0


From a608ad45d7addb784083e3fcc34981c2bdde84c9 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:37:40 -0600
Subject: [PATCH 05/49] Step 2.4: Import starter JS

---
 client/main.js | 23 +----------------------
 1 file changed, 1 insertion(+), 22 deletions(-)

diff --git a/client/main.js b/client/main.js
index ecb3282..2a526f3 100644
--- a/client/main.js
+++ b/client/main.js
@@ -1,22 +1 @@
-import { Template } from 'meteor/templating';
-import { ReactiveVar } from 'meteor/reactive-var';
-
-import './main.html';
-
-Template.hello.onCreated(function helloOnCreated() {
-  // counter starts at 0
-  this.counter = new ReactiveVar(0);
-});
-
-Template.hello.helpers({
-  counter() {
-    return Template.instance().counter.get();
-  },
-});
-
-Template.hello.events({
-  'click button'(event, instance) {
-    // increment the counter when button is clicked
-    instance.counter.set(instance.counter.get() + 1);
-  },
-});
+import '../imports/ui/body.js';
\ No newline at end of file
-- 
2.11.0


From 951c1eddcd13ad58845638521239f0eaed50e5a4 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 15:42:21 -0600
Subject: [PATCH 06/49] Step 2.5: Add CSS

---
 client/main.css | 124 +++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 123 insertions(+), 1 deletion(-)

diff --git a/client/main.css b/client/main.css
index 7f354f0..cec3ae6 100644
--- a/client/main.css
+++ b/client/main.css
@@ -1,4 +1,126 @@
+/* CSS declarations go here */
 body {
-  padding: 10px;
   font-family: sans-serif;
+  background-color: #315481;
+  background-image: linear-gradient(to bottom, #315481, #918e82 100%);
+  background-attachment: fixed;
+
+  position: absolute;
+  top: 0;
+  bottom: 0;
+  left: 0;
+  right: 0;
+
+  padding: 0;
+  margin: 0;
+
+  font-size: 14px;
 }
+
+.container {
+  max-width: 600px;
+  margin: 0 auto;
+  min-height: 100%;
+  background: white;
+}
+
+header {
+  background: #d2edf4;
+  background-image: linear-gradient(to bottom, #d0edf5, #e1e5f0 100%);
+  padding: 20px 15px 15px 15px;
+  position: relative;
+}
+
+#login-buttons {
+  display: block;
+}
+
+h1 {
+  font-size: 1.5em;
+  margin: 0;
+  margin-bottom: 10px;
+  display: inline-block;
+  margin-right: 1em;
+}
+
+form {
+  margin-top: 10px;
+  margin-bottom: -10px;
+  position: relative;
+}
+
+.new-task input {
+  box-sizing: border-box;
+  padding: 10px 0;
+  background: transparent;
+  border: none;
+  width: 100%;
+  padding-right: 80px;
+  font-size: 1em;
+}
+
+.new-task input:focus{
+  outline: 0;
+}
+
+ul {
+  margin: 0;
+  padding: 0;
+  background: white;
+}
+
+.delete {
+  float: right;
+  font-weight: bold;
+  background: none;
+  font-size: 1em;
+  border: none;
+  position: relative;
+}
+
+li {
+  position: relative;
+  list-style: none;
+  padding: 15px;
+  border-bottom: #eee solid 1px;
+}
+
+li .text {
+  margin-left: 10px;
+}
+
+li.checked {
+  color: #888;
+}
+
+li.checked .text {
+  text-decoration: line-through;
+}
+
+li.private {
+  background: #eee;
+  border-color: #ddd;
+}
+
+header .hide-completed {
+  float: right;
+}
+
+.toggle-private {
+  margin-left: 5px;
+}
+
+@media (max-width: 600px) {
+  li {
+    padding: 12px 15px;
+  }
+
+  .search {
+    width: 150px;
+    clear: both;
+  }
+
+  .new-task input {
+    padding-bottom: 5px;
+  }
+}
\ No newline at end of file
-- 
2.11.0


From d600626c103a48c3a6989100868a33bc7b977fe0 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:39:52 -0600
Subject: [PATCH 07/49] Step 3.1: Create tasks collection

---
 imports/api/tasks.js | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 imports/api/tasks.js

diff --git a/imports/api/tasks.js b/imports/api/tasks.js
new file mode 100644
index 0000000..dfeb446
--- /dev/null
+++ b/imports/api/tasks.js
@@ -0,0 +1,3 @@
+import { Mongo } from 'meteor/mongo';
+
+export const Tasks = new Mongo.Collection('tasks');
\ No newline at end of file
-- 
2.11.0


From db9dff617978fa5041f091e0d5a72cf31ee08683 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:40:19 -0600
Subject: [PATCH 08/49] Step 3.2: Load tasks collection on the server

---
 server/main.js | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/server/main.js b/server/main.js
index 31a9e0e..0bce0ec 100644
--- a/server/main.js
+++ b/server/main.js
@@ -1,5 +1 @@
-import { Meteor } from 'meteor/meteor';
-
-Meteor.startup(() => {
-  // code to run on server at startup
-});
+import '../imports/api/tasks.js';
\ No newline at end of file
-- 
2.11.0


From 1d7b540ff19b8c5717b1d93d26c7f1a9860606ac Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:41:19 -0600
Subject: [PATCH 09/49] Step 3.3: Load tasks from Tasks collection

---
 imports/ui/body.js | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/imports/ui/body.js b/imports/ui/body.js
index 4c3513b..8505966 100644
--- a/imports/ui/body.js
+++ b/imports/ui/body.js
@@ -1,11 +1,11 @@
 import { Template } from 'meteor/templating';
 
+import { Tasks } from '../api/tasks.js';
+
 import './body.html';
 
 Template.body.helpers({
-  tasks: [
-    { text: 'This is task 1' },
-    { text: 'This is task 2' },
-    { text: 'This is task 3' },
-  ],
+    tasks() {
+        return Tasks.find({});
+      },
 });
\ No newline at end of file
-- 
2.11.0


From 2d6a8451111fc83c84ff0326218b897c39434021 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:56:19 -0600
Subject: [PATCH 10/49] Step 4.1: Add form for new tasks

---
 imports/ui/body.html | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/imports/ui/body.html b/imports/ui/body.html
index da9cc97..5b34b41 100644
--- a/imports/ui/body.html
+++ b/imports/ui/body.html
@@ -2,8 +2,15 @@
     <div class="container">
       <header>
         <h1>Todo List</h1>
+
+        <form class="new-task">
+            <input type="text" name="text" placeholder="Type to add new tasks" />
+          </form>
+
       </header>
   
+
+
       <ul>
         {{#each tasks}}
           {{> task}}
-- 
2.11.0


From e5154f4a0c879ed3fcbd1a49a3eefdfed9b00bc9 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:43:21 -0600
Subject: [PATCH 11/49] Step 4.2: Add event handler for form submit

---
 imports/ui/body.js | 22 +++++++++++++++++++++-
 1 file changed, 21 insertions(+), 1 deletion(-)

diff --git a/imports/ui/body.js b/imports/ui/body.js
index 8505966..2424c08 100644
--- a/imports/ui/body.js
+++ b/imports/ui/body.js
@@ -8,4 +8,24 @@ Template.body.helpers({
     tasks() {
         return Tasks.find({});
       },
-});
\ No newline at end of file
+});
+
+Template.body.events({
+    'submit .new-task'(event) {
+      // Prevent default browser form submit
+      event.preventDefault();
+  
+      // Get value from form element
+      const target = event.target;
+      const text = target.text.value;
+  
+      // Insert a task into the collection
+      Tasks.insert({
+        text,
+        createdAt: new Date(), // current time
+      });
+  
+      // Clear form
+      target.text.value = '';
+    },
+  });
\ No newline at end of file
-- 
2.11.0


From bc845fb7e24b41433d23d089e644e8634329e5ef Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:44:24 -0600
Subject: [PATCH 12/49] Step 4.3: Show newest tasks at the top

---
 imports/ui/body.js | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/imports/ui/body.js b/imports/ui/body.js
index 2424c08..f1658fe 100644
--- a/imports/ui/body.js
+++ b/imports/ui/body.js
@@ -6,7 +6,8 @@ import './body.html';
 
 Template.body.helpers({
     tasks() {
-        return Tasks.find({});
+        // Show newest tasks at the top
+        return Tasks.find({}, { sort: { createdAt: -1 } });
       },
 });
 
-- 
2.11.0


From f38127bdce9f70c129cc7c03900a3ca972c0d86f Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:45:03 -0600
Subject: [PATCH 13/49] Step 5.1: Add buttons to Task component

---
 imports/ui/task.html | 9 +++++++++
 1 file changed, 9 insertions(+)
 create mode 100644 imports/ui/task.html

diff --git a/imports/ui/task.html b/imports/ui/task.html
new file mode 100644
index 0000000..e88dcd9
--- /dev/null
+++ b/imports/ui/task.html
@@ -0,0 +1,9 @@
+<template name="task">
+    <li class="{{#if checked}}checked{{/if}}">
+      <button class="delete">&times;</button>
+  
+      <input type="checkbox" checked="{{checked}}" class="toggle-checked" />
+  
+      <span class="text">{{text}}</span>
+    </li>
+  </template>
\ No newline at end of file
-- 
2.11.0


From 2e4a90cd810d3948826872f5286a69c3479bb2e0 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:48:14 -0600
Subject: [PATCH 14/49] Step 5.2: Remove Tasks component from Body file

---
 imports/ui/body.html | 4 ----
 1 file changed, 4 deletions(-)

diff --git a/imports/ui/body.html b/imports/ui/body.html
index 5b34b41..93552d3 100644
--- a/imports/ui/body.html
+++ b/imports/ui/body.html
@@ -18,7 +18,3 @@
       </ul>
     </div>
   </body>
-  
-  <template name="task">
-    <li>{{text}}</li>
-  </template>
\ No newline at end of file
-- 
2.11.0


From 9823ad1bd75f13a8912ba0de8af43db7efd1a05d Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:48:53 -0600
Subject: [PATCH 15/49] Step 5.3: Add event handlers for Task buttons

---
 imports/ui/task.js | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)
 create mode 100644 imports/ui/task.js

diff --git a/imports/ui/task.js b/imports/ui/task.js
new file mode 100644
index 0000000..06b36b2
--- /dev/null
+++ b/imports/ui/task.js
@@ -0,0 +1,17 @@
+import { Template } from 'meteor/templating';
+
+import { Tasks } from '../api/tasks.js';
+
+import './task.html';
+
+Template.task.events({
+  'click .toggle-checked'() {
+    // Set the checked property to the opposite of its current value
+    Tasks.update(this._id, {
+      $set: { checked: ! this.checked },
+    });
+  },
+  'click .delete'() {
+    Tasks.remove(this._id);
+  },
+});
\ No newline at end of file
-- 
2.11.0


From 55fe8c51b1301f68cdc815799689bba463f378c4 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:49:24 -0600
Subject: [PATCH 16/49] Step 5.4: Import Task component from the body

---
 imports/ui/body.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/body.js b/imports/ui/body.js
index f1658fe..bc1e9df 100644
--- a/imports/ui/body.js
+++ b/imports/ui/body.js
@@ -2,6 +2,7 @@ import { Template } from 'meteor/templating';
 
 import { Tasks } from '../api/tasks.js';
 
+import './task.js';
 import './body.html';
 
 Template.body.helpers({
-- 
2.11.0


From d0aec49b70b704c40f9e5a80562db6e847863544 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:50:06 -0600
Subject: [PATCH 17/49] Step 7.1: Add hide-completed checkbox to HTML

---
 imports/ui/body.html | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/imports/ui/body.html b/imports/ui/body.html
index 93552d3..4481687 100644
--- a/imports/ui/body.html
+++ b/imports/ui/body.html
@@ -3,6 +3,11 @@
       <header>
         <h1>Todo List</h1>
 
+    <label class="hide-completed">
+        <input type="checkbox" />
+        Hide Completed Tasks
+      </label>
+
         <form class="new-task">
             <input type="text" name="text" placeholder="Type to add new tasks" />
           </form>
@@ -10,7 +15,6 @@
       </header>
   
 
-
       <ul>
         {{#each tasks}}
           {{> task}}
-- 
2.11.0


From d6ae48aa56b8ff14db87d6bb673db9a8134078d6 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:50:59 -0600
Subject: [PATCH 18/49] Step 7.2: Add reactive-dict package

---
 .meteor/packages | 1 +
 .meteor/versions | 1 +
 2 files changed, 2 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index 0d859be..15c84f7 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -21,3 +21,4 @@ shell-server@0.4.0            # Server-side component of the `meteor shell` comm
 
 autopublish@1.0.7             # Publish all data to the clients (for prototyping)
 insecure@1.0.7                # Allow all DB writes from clients (for prototyping)
+reactive-dict
diff --git a/.meteor/versions b/.meteor/versions
index 3af382b..70771e6 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -57,6 +57,7 @@ observe-sequence@1.0.16
 ordered-dict@1.1.0
 promise@0.11.2
 random@1.1.0
+reactive-dict@1.3.0
 reactive-var@1.0.11
 reload@1.3.0
 retry@1.1.0
-- 
2.11.0


From bca010597f4af2b3dc01f32029661d3e4f5baf7a Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:52:19 -0600
Subject: [PATCH 19/49] Step 7.3: Add state dictionary to the body

---
 imports/ui/body.js | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/imports/ui/body.js b/imports/ui/body.js
index bc1e9df..1bd96b1 100644
--- a/imports/ui/body.js
+++ b/imports/ui/body.js
@@ -1,10 +1,15 @@
 import { Template } from 'meteor/templating';
+import { ReactiveDict } from 'meteor/reactive-dict';
 
 import { Tasks } from '../api/tasks.js';
 
 import './task.js';
 import './body.html';
 
+Template.body.onCreated(function bodyOnCreated() {
+    this.state = new ReactiveDict();
+  });
+
 Template.body.helpers({
     tasks() {
         // Show newest tasks at the top
-- 
2.11.0


From e62e925d1bb40018cfadf09a0a6b29d2929dd38d Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:52:54 -0600
Subject: [PATCH 20/49] Step 7.4: Add event handler for checkbox

---
 imports/ui/body.js | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/imports/ui/body.js b/imports/ui/body.js
index 1bd96b1..6a064f0 100644
--- a/imports/ui/body.js
+++ b/imports/ui/body.js
@@ -35,4 +35,7 @@ Template.body.events({
       // Clear form
       target.text.value = '';
     },
+    'change .hide-completed input'(event, instance) {
+        instance.state.set('hideCompleted', event.target.checked);
+      },
   });
\ No newline at end of file
-- 
2.11.0


From 60afe2159b407d19419c781921301b2b3bf1587e Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:53:36 -0600
Subject: [PATCH 21/49] Step 7.5: Add helpers to body template

---
 imports/ui/body.js | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/imports/ui/body.js b/imports/ui/body.js
index 6a064f0..5203c5c 100644
--- a/imports/ui/body.js
+++ b/imports/ui/body.js
@@ -12,7 +12,12 @@ Template.body.onCreated(function bodyOnCreated() {
 
 Template.body.helpers({
     tasks() {
-        // Show newest tasks at the top
+        const instance = Template.instance();
+        if (instance.state.get('hideCompleted')) {
+          // If hide completed is checked, filter tasks
+          return Tasks.find({ checked: { $ne: true } }, { sort: { createdAt: -1 } });
+        }
+        // Otherwise, return all of the tasks
         return Tasks.find({}, { sort: { createdAt: -1 } });
       },
 });
-- 
2.11.0


From cbe5d810a2f08ae385b459062629797abf42225b Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:54:12 -0600
Subject: [PATCH 22/49] Step 7.6: Add incompleteCount helper to body

---
 imports/ui/body.js | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/imports/ui/body.js b/imports/ui/body.js
index 5203c5c..a3a3f50 100644
--- a/imports/ui/body.js
+++ b/imports/ui/body.js
@@ -19,6 +19,9 @@ Template.body.helpers({
         }
         // Otherwise, return all of the tasks
         return Tasks.find({}, { sort: { createdAt: -1 } });
+    },
+    incompleteCount() {
+        return Tasks.find({ checked: { $ne: true } }).count();
       },
 });
 
-- 
2.11.0


From 430e3a3843f3614015866a0159e7986ddeb59acb Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 15:50:47 -0600
Subject: [PATCH 23/49] Step 7.7: Display incompleteCount

---
 imports/ui/body.html | 15 +++++++--------
 1 file changed, 7 insertions(+), 8 deletions(-)

diff --git a/imports/ui/body.html b/imports/ui/body.html
index 4481687..1cb896a 100644
--- a/imports/ui/body.html
+++ b/imports/ui/body.html
@@ -1,20 +1,19 @@
 <body>
     <div class="container">
       <header>
-        <h1>Todo List</h1>
+      <h1>Todo List ({{incompleteCount}})</h1>
 
-    <label class="hide-completed">
-        <input type="checkbox" />
-        Hide Completed Tasks
+      <label class="hide-completed">
+      <input type="checkbox" />
+          Hide Completed Tasks
       </label>
 
-        <form class="new-task">
-            <input type="text" name="text" placeholder="Type to add new tasks" />
-          </form>
+      <form class="new-task">
+        <input type="text" name="text" placeholder="Type to add new tasks" />
+      </form>
 
       </header>
   
-
       <ul>
         {{#each tasks}}
           {{> task}}
-- 
2.11.0


From d10463ce94e485ddb24f6051e628bdc3a4b61b77 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 13:59:41 -0600
Subject: [PATCH 24/49] Step 8.1: Add accounts-ui and accounts-password

---
 .meteor/packages |  2 ++
 .meteor/versions | 14 ++++++++++++++
 2 files changed, 16 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index 15c84f7..f0279f8 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -22,3 +22,5 @@ shell-server@0.4.0            # Server-side component of the `meteor shell` comm
 autopublish@1.0.7             # Publish all data to the clients (for prototyping)
 insecure@1.0.7                # Allow all DB writes from clients (for prototyping)
 reactive-dict
+accounts-ui
+accounts-password
diff --git a/.meteor/versions b/.meteor/versions
index 70771e6..01349dc 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -1,3 +1,7 @@
+accounts-base@1.5.0
+accounts-password@1.5.3
+accounts-ui@1.3.1
+accounts-ui-unstyled@1.4.2
 allow-deny@1.1.0
 autopublish@1.0.7
 autoupdate@1.6.0
@@ -16,6 +20,7 @@ check@1.3.1
 ddp@1.4.0
 ddp-client@2.3.3
 ddp-common@1.4.0
+ddp-rate-limiter@1.0.7
 ddp-server@2.3.1
 deps@1.0.12
 diff-sequence@1.1.1
@@ -25,6 +30,7 @@ ecmascript-runtime@0.7.0
 ecmascript-runtime-client@0.10.0
 ecmascript-runtime-server@0.9.0
 ejson@1.1.1
+email@1.2.3
 es5-shim@4.8.0
 fetch@0.1.1
 geojson-utils@1.0.10
@@ -36,7 +42,9 @@ insecure@1.0.7
 inter-process-messaging@0.1.0
 jquery@3.0.0
 launch-screen@1.1.1
+less@2.8.0
 livedata@1.0.18
+localstorage@1.2.0
 logging@1.1.20
 meteor@1.9.3
 meteor-base@1.4.0
@@ -52,20 +60,26 @@ mongo@1.8.1
 mongo-decimal@0.1.1
 mongo-dev-server@1.1.0
 mongo-id@1.0.7
+npm-bcrypt@0.9.3
 npm-mongo@3.3.0
 observe-sequence@1.0.16
 ordered-dict@1.1.0
 promise@0.11.2
 random@1.1.0
+rate-limit@1.0.9
 reactive-dict@1.3.0
 reactive-var@1.0.11
 reload@1.3.0
 retry@1.1.0
 routepolicy@1.1.0
+service-configuration@1.0.11
+session@1.2.0
+sha@1.0.9
 shell-server@0.4.0
 socket-stream-client@0.2.3
 spacebars@1.0.15
 spacebars-compiler@1.1.3
+srp@1.0.12
 standard-minifier-css@1.6.0
 standard-minifier-js@2.6.0
 templating@1.3.2
-- 
2.11.0


From da475a5f7d644b8590efef02508b44dc6205d3aa Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:00:37 -0600
Subject: [PATCH 25/49] Step 8.2: Include loginButtons

---
 imports/ui/body.html | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/body.html b/imports/ui/body.html
index 1cb896a..33917bd 100644
--- a/imports/ui/body.html
+++ b/imports/ui/body.html
@@ -8,6 +8,8 @@
           Hide Completed Tasks
       </label>
 
+      {{> loginButtons}}
+
       <form class="new-task">
         <input type="text" name="text" placeholder="Type to add new tasks" />
       </form>
-- 
2.11.0


From e00d070124f30adb4e3e647cf7c8db90930fe135 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:01:28 -0600
Subject: [PATCH 26/49] Step 8.3: Configure accounts-ui

---
 imports/startup/accounts-config.js | 5 +++++
 1 file changed, 5 insertions(+)
 create mode 100644 imports/startup/accounts-config.js

diff --git a/imports/startup/accounts-config.js b/imports/startup/accounts-config.js
new file mode 100644
index 0000000..4121009
--- /dev/null
+++ b/imports/startup/accounts-config.js
@@ -0,0 +1,5 @@
+import { Accounts } from 'meteor/accounts-base';
+
+Accounts.ui.config({
+  passwordSignupFields: 'USERNAME_ONLY',
+});
\ No newline at end of file
-- 
2.11.0


From 3abc8eb2f87033b45a9c9b874e9ba3bc927b7841 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:01:55 -0600
Subject: [PATCH 27/49] Step 8.4: Import accounts configuration

---
 client/main.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/main.js b/client/main.js
index 2a526f3..d7368df 100644
--- a/client/main.js
+++ b/client/main.js
@@ -1 +1,2 @@
+import '../imports/startup/accounts-config.js';
 import '../imports/ui/body.js';
\ No newline at end of file
-- 
2.11.0


From 8b9858e960ef50e0176f3256af42bf7b5e9d6a1f Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:04:30 -0600
Subject: [PATCH 28/49] Step 8.5: Update insert to include user data

---
 imports/ui/body.js | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/imports/ui/body.js b/imports/ui/body.js
index a3a3f50..3bef447 100644
--- a/imports/ui/body.js
+++ b/imports/ui/body.js
@@ -1,3 +1,4 @@
+import { Meteor } from 'meteor/meteor';
 import { Template } from 'meteor/templating';
 import { ReactiveDict } from 'meteor/reactive-dict';
 
@@ -38,6 +39,8 @@ Template.body.events({
       Tasks.insert({
         text,
         createdAt: new Date(), // current time
+        owner: Meteor.userId(),
+        username: Meteor.user().username,
       });
   
       // Clear form
-- 
2.11.0


From e913f6dc094444e36cc57657f569d554343b60ee Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:05:14 -0600
Subject: [PATCH 29/49] Step 8.6: Only show add task form if logged in

---
 imports/ui/body.html | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/imports/ui/body.html b/imports/ui/body.html
index 33917bd..4bb5208 100644
--- a/imports/ui/body.html
+++ b/imports/ui/body.html
@@ -10,9 +10,11 @@
 
       {{> loginButtons}}
 
-      <form class="new-task">
-        <input type="text" name="text" placeholder="Type to add new tasks" />
-      </form>
+      {{#if currentUser}}
+        <form class="new-task">
+            <input type="text" name="text" placeholder="Type to add new tasks" />
+        </form>
+      {{/if}}
 
       </header>
   
-- 
2.11.0


From 3deec55da32ad638a618086317fb563afb936d2d Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:05:50 -0600
Subject: [PATCH 30/49] Step 8.7: Display username next to task

---
 imports/ui/task.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/task.html b/imports/ui/task.html
index e88dcd9..9fa8910 100644
--- a/imports/ui/task.html
+++ b/imports/ui/task.html
@@ -4,6 +4,6 @@
   
       <input type="checkbox" checked="{{checked}}" class="toggle-checked" />
   
-      <span class="text">{{text}}</span>
+      <span class="text"><strong>{{username}}</strong> - {{text}}</span>
     </li>
   </template>
\ No newline at end of file
-- 
2.11.0


From bab7b164fdbae9dbd1eb86cd5ae7426d9e889326 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:06:30 -0600
Subject: [PATCH 31/49] Step 9.1: Remove insecure package

---
 .meteor/packages | 1 -
 .meteor/versions | 1 -
 2 files changed, 2 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index f0279f8..7a8a0a2 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -20,7 +20,6 @@ typescript@3.7.5              # Enable TypeScript syntax in .ts and .tsx modules
 shell-server@0.4.0            # Server-side component of the `meteor shell` command
 
 autopublish@1.0.7             # Publish all data to the clients (for prototyping)
-insecure@1.0.7                # Allow all DB writes from clients (for prototyping)
 reactive-dict
 accounts-ui
 accounts-password
diff --git a/.meteor/versions b/.meteor/versions
index 01349dc..d4cc8a7 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -38,7 +38,6 @@ hot-code-push@1.0.4
 html-tools@1.0.11
 htmljs@1.0.11
 id-map@1.1.0
-insecure@1.0.7
 inter-process-messaging@0.1.0
 jquery@3.0.0
 launch-screen@1.1.1
-- 
2.11.0


From cada04125824de9f9b0d055101a606a952f7ef1f Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:07:39 -0600
Subject: [PATCH 32/49] Step 9.2: Define some methods

---
 imports/api/tasks.js | 33 ++++++++++++++++++++++++++++++++-
 1 file changed, 32 insertions(+), 1 deletion(-)

diff --git a/imports/api/tasks.js b/imports/api/tasks.js
index dfeb446..329e381 100644
--- a/imports/api/tasks.js
+++ b/imports/api/tasks.js
@@ -1,3 +1,34 @@
+import { Meteor } from 'meteor/meteor';
 import { Mongo } from 'meteor/mongo';
+import { check } from 'meteor/check';
 
-export const Tasks = new Mongo.Collection('tasks');
\ No newline at end of file
+export const Tasks = new Mongo.Collection('tasks');
+
+Meteor.methods({
+  'tasks.insert'(text) {
+    check(text, String);
+
+    // Make sure the user is logged in before inserting a task
+    if (! this.userId) {
+      throw new Meteor.Error('not-authorized');
+    }
+
+    Tasks.insert({
+      text,
+      createdAt: new Date(),
+      owner: this.userId,
+      username: Meteor.users.findOne(this.userId).username,
+    });
+  },
+  'tasks.remove'(taskId) {
+    check(taskId, String);
+
+    Tasks.remove(taskId);
+  },
+  'tasks.setChecked'(taskId, setChecked) {
+    check(taskId, String);
+    check(setChecked, Boolean);
+
+    Tasks.update(taskId, { $set: { checked: setChecked } });
+  },
+});
\ No newline at end of file
-- 
2.11.0


From 7586870655b6fcf79285d6efd70efe3e4f69885d Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:08:49 -0600
Subject: [PATCH 33/49] Step 9.3: Replace insert with tasks.insert method

---
 imports/ui/body.js | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

diff --git a/imports/ui/body.js b/imports/ui/body.js
index 3bef447..6fd5ce2 100644
--- a/imports/ui/body.js
+++ b/imports/ui/body.js
@@ -36,12 +36,7 @@ Template.body.events({
       const text = target.text.value;
   
       // Insert a task into the collection
-      Tasks.insert({
-        text,
-        createdAt: new Date(), // current time
-        owner: Meteor.userId(),
-        username: Meteor.user().username,
-      });
+      Meteor.call('tasks.insert', text);
   
       // Clear form
       target.text.value = '';
-- 
2.11.0


From bf48a7d3484927abb07fba451275589b1442bdec Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:09:51 -0600
Subject: [PATCH 34/49] Step 9.4: Replace update and remove with methods

---
 imports/ui/task.js | 11 ++++++-----
 1 file changed, 6 insertions(+), 5 deletions(-)

diff --git a/imports/ui/task.js b/imports/ui/task.js
index 06b36b2..e0e8486 100644
--- a/imports/ui/task.js
+++ b/imports/ui/task.js
@@ -1,17 +1,18 @@
+import { Meteor } from 'meteor/meteor';
 import { Template } from 'meteor/templating';
 
-import { Tasks } from '../api/tasks.js';
+
 
 import './task.html';
 
 Template.task.events({
   'click .toggle-checked'() {
     // Set the checked property to the opposite of its current value
-    Tasks.update(this._id, {
-      $set: { checked: ! this.checked },
-    });
+    Meteor.call('tasks.setChecked', this._id, !this.checked);
+
+
   },
   'click .delete'() {
-    Tasks.remove(this._id);
+    Meteor.call('tasks.remove', this._id);
   },
 });
\ No newline at end of file
-- 
2.11.0


From 7f28e06bd232a32cc503b1e8d8a346ffebaa22e2 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:10:26 -0600
Subject: [PATCH 35/49] Step 10.1: Remove autopublish

---
 .meteor/packages | 1 -
 .meteor/versions | 1 -
 2 files changed, 2 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index 7a8a0a2..b186595 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -19,7 +19,6 @@ ecmascript@0.14.2              # Enable ECMAScript2015+ syntax in app code
 typescript@3.7.5              # Enable TypeScript syntax in .ts and .tsx modules
 shell-server@0.4.0            # Server-side component of the `meteor shell` command
 
-autopublish@1.0.7             # Publish all data to the clients (for prototyping)
 reactive-dict
 accounts-ui
 accounts-password
diff --git a/.meteor/versions b/.meteor/versions
index d4cc8a7..4c4e286 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -3,7 +3,6 @@ accounts-password@1.5.3
 accounts-ui@1.3.1
 accounts-ui-unstyled@1.4.2
 allow-deny@1.1.0
-autopublish@1.0.7
 autoupdate@1.6.0
 babel-compiler@7.5.2
 babel-runtime@1.5.0
-- 
2.11.0


From 13aa473c73d118b9089caee9359bb7e7d84286aa Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:10:55 -0600
Subject: [PATCH 36/49] Step 10.2: Add publication for tasks

---
 imports/api/tasks.js | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/imports/api/tasks.js b/imports/api/tasks.js
index 329e381..cf4ddff 100644
--- a/imports/api/tasks.js
+++ b/imports/api/tasks.js
@@ -4,6 +4,13 @@ import { check } from 'meteor/check';
 
 export const Tasks = new Mongo.Collection('tasks');
 
+if (Meteor.isServer) {
+    // This code only runs on the server
+    Meteor.publish('tasks', function tasksPublication() {
+      return Tasks.find();
+    });
+  }
+
 Meteor.methods({
   'tasks.insert'(text) {
     check(text, String);
-- 
2.11.0


From 04c6e1757320fa0520af260298f1706d6d520b6a Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:11:29 -0600
Subject: [PATCH 37/49] Step 10.3: Subscribe to tasks

---
 imports/ui/body.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/body.js b/imports/ui/body.js
index 6fd5ce2..3954e2c 100644
--- a/imports/ui/body.js
+++ b/imports/ui/body.js
@@ -9,6 +9,7 @@ import './body.html';
 
 Template.body.onCreated(function bodyOnCreated() {
     this.state = new ReactiveDict();
+    Meteor.subscribe('tasks');
   });
 
 Template.body.helpers({
-- 
2.11.0


From 50a4e171be75e7e22a87c05b5c6f69c957c2006f Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:11:58 -0600
Subject: [PATCH 38/49] Step 10.4: Add private button

---
 imports/ui/task.html | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/imports/ui/task.html b/imports/ui/task.html
index 9fa8910..41734e5 100644
--- a/imports/ui/task.html
+++ b/imports/ui/task.html
@@ -4,6 +4,16 @@
   
       <input type="checkbox" checked="{{checked}}" class="toggle-checked" />
   
+      {{#if isOwner}}
+      <button class="toggle-private">
+        {{#if private}}
+          Private
+        {{else}}
+          Public
+        {{/if}}
+      </button>
+    {{/if}}
+
       <span class="text"><strong>{{username}}</strong> - {{text}}</span>
     </li>
   </template>
\ No newline at end of file
-- 
2.11.0


From 167ce4498d952364b4b842152f0cb65fa2d4f1bd Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 15:54:49 -0600
Subject: [PATCH 39/49] Step 10.5: Add private class to private tasks

---
 imports/ui/task.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/task.html b/imports/ui/task.html
index 41734e5..0badef2 100644
--- a/imports/ui/task.html
+++ b/imports/ui/task.html
@@ -1,5 +1,5 @@
 <template name="task">
-    <li class="{{#if checked}}checked{{/if}}">
+    <li class="{{#if checked}}checked{{/if}} {{#if private}}private{{/if}}">
       <button class="delete">&times;</button>
   
       <input type="checkbox" checked="{{checked}}" class="toggle-checked" />
-- 
2.11.0


From 46125bc1809001ad9e41e2544c6ac5f2f6431ab3 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:33:58 -0600
Subject: [PATCH 40/49] Step 10.6: Define helper to check ownership

---
 imports/ui/task.js | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/imports/ui/task.js b/imports/ui/task.js
index e0e8486..26275b8 100644
--- a/imports/ui/task.js
+++ b/imports/ui/task.js
@@ -1,10 +1,14 @@
 import { Meteor } from 'meteor/meteor';
 import { Template } from 'meteor/templating';
 
-
-
 import './task.html';
 
+Template.task.helpers({
+    isOwner() {
+      return this.owner === Meteor.userId();
+    },
+  });
+
 Template.task.events({
   'click .toggle-checked'() {
     // Set the checked property to the opposite of its current value
-- 
2.11.0


From 8ea18f23f111df2020e0af3e9b266cec261df7de Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:34:44 -0600
Subject: [PATCH 41/49] Step 10.7: Define method to set tasks to private

---
 imports/api/tasks.js | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/imports/api/tasks.js b/imports/api/tasks.js
index cf4ddff..ba9577b 100644
--- a/imports/api/tasks.js
+++ b/imports/api/tasks.js
@@ -37,5 +37,18 @@ Meteor.methods({
     check(setChecked, Boolean);
 
     Tasks.update(taskId, { $set: { checked: setChecked } });
-  },
+    },
+    'tasks.setPrivate'(taskId, setToPrivate) {
+        check(taskId, String);
+        check(setToPrivate, Boolean);
+    
+        const task = Tasks.findOne(taskId);
+    
+        // Make sure only the task owner can make a task private
+        if (task.owner !== this.userId) {
+          throw new Meteor.Error('not-authorized');
+        }
+    
+        Tasks.update(taskId, { $set: { private: setToPrivate } });
+      },
 });
\ No newline at end of file
-- 
2.11.0


From f6a75f177953db9cf34f31079d2230ae14d3d267 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:37:33 -0600
Subject: [PATCH 42/49] Step 10.8: Add event handler to call the setPrivate
 method

---
 imports/ui/task.js | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/imports/ui/task.js b/imports/ui/task.js
index 26275b8..545fe3e 100644
--- a/imports/ui/task.js
+++ b/imports/ui/task.js
@@ -18,5 +18,8 @@ Template.task.events({
   },
   'click .delete'() {
     Meteor.call('tasks.remove', this._id);
+    },
+  'click .toggle-private'() {
+    Meteor.call('tasks.setPrivate', this._id, !this.private);
   },
 });
\ No newline at end of file
-- 
2.11.0


From 03c600266aa57f8d951efb63f5d45fb789e0283e Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:39:12 -0600
Subject: [PATCH 43/49] Step 10.9: Only publish tasks the user is allowed to
 see

---
 imports/api/tasks.js | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/imports/api/tasks.js b/imports/api/tasks.js
index ba9577b..9d25b98 100644
--- a/imports/api/tasks.js
+++ b/imports/api/tasks.js
@@ -6,8 +6,14 @@ export const Tasks = new Mongo.Collection('tasks');
 
 if (Meteor.isServer) {
     // This code only runs on the server
+    // Only publish tasks that are public or belong to the current user
     Meteor.publish('tasks', function tasksPublication() {
-      return Tasks.find();
+      return Tasks.find({
+        $or: [
+          { private: { $ne: true } },
+          { owner: this.userId },
+        ],
+      });
     });
   }
 
-- 
2.11.0


From 7137845c1e1c4fe95527112399f8d885c0172c75 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:40:02 -0600
Subject: [PATCH 44/49] Step 10.10: Add some extra security to methods

---
 imports/api/tasks.js | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/imports/api/tasks.js b/imports/api/tasks.js
index 9d25b98..20539e6 100644
--- a/imports/api/tasks.js
+++ b/imports/api/tasks.js
@@ -36,12 +36,24 @@ Meteor.methods({
   'tasks.remove'(taskId) {
     check(taskId, String);
 
+    const task = Tasks.findOne(taskId);
+    if (task.private && task.owner !== this.userId) {
+      // If the task is private, make sure only the owner can delete it
+      throw new Meteor.Error('not-authorized');
+    }
+
     Tasks.remove(taskId);
   },
   'tasks.setChecked'(taskId, setChecked) {
     check(taskId, String);
     check(setChecked, Boolean);
 
+    const task = Tasks.findOne(taskId);
+    if (task.private && task.owner !== this.userId) {
+      // If the task is private, make sure only the owner can check it off
+      throw new Meteor.Error('not-authorized');
+    }
+
     Tasks.update(taskId, { $set: { checked: setChecked } });
     },
     'tasks.setPrivate'(taskId, setToPrivate) {
-- 
2.11.0


From 5ddaaf1c5bd065d6aa9649309bc9ec9ec71e8317 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:43:29 -0600
Subject: [PATCH 45/49] Step 11.1: Added meteortesting:mocha meteor package and
 the chai npm package

---
 .meteor/packages  |  1 +
 .meteor/versions  |  7 +++++++
 package-lock.json | 46 ++++++++++++++++++++++++++++++++++++++++++++++
 package.json      |  1 +
 4 files changed, 55 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index b186595..e1882e7 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -22,3 +22,4 @@ shell-server@0.4.0            # Server-side component of the `meteor shell` comm
 reactive-dict
 accounts-ui
 accounts-password
+meteortesting:mocha
diff --git a/.meteor/versions b/.meteor/versions
index 4c4e286..c015430 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -36,16 +36,22 @@ geojson-utils@1.0.10
 hot-code-push@1.0.4
 html-tools@1.0.11
 htmljs@1.0.11
+http@1.4.2
 id-map@1.1.0
 inter-process-messaging@0.1.0
 jquery@3.0.0
 launch-screen@1.1.1
 less@2.8.0
 livedata@1.0.18
+lmieulet:meteor-coverage@1.1.4
 localstorage@1.2.0
 logging@1.1.20
 meteor@1.9.3
 meteor-base@1.4.0
+meteorhacks:picker@1.0.3
+meteortesting:browser-tests@1.3.2
+meteortesting:mocha@1.1.5
+meteortesting:mocha-core@7.0.1
 minifier-css@1.5.0
 minifier-js@2.6.0
 minimongo@1.4.5
@@ -88,5 +94,6 @@ tracker@1.2.0
 typescript@3.7.5
 ui@1.0.13
 underscore@1.0.10
+url@1.2.0
 webapp@1.8.2
 webapp-hashing@1.0.9
diff --git a/package-lock.json b/package-lock.json
index d78ee75..28e381c 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -11,6 +11,42 @@
         "regenerator-runtime": "^0.13.4"
       }
     },
+    "assertion-error": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/assertion-error/-/assertion-error-1.1.0.tgz",
+      "integrity": "sha512-jgsaNduz+ndvGyFt3uSuWqvy4lCnIJiovtouQN5JZHOKCS2QuhEdbcQHFhVksz2N2U9hXJo8odG7ETyWlEeuDw=="
+    },
+    "chai": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/chai/-/chai-4.2.0.tgz",
+      "integrity": "sha512-XQU3bhBukrOsQCuwZndwGcCVQHyZi53fQ6Ys1Fym7E4olpIqqZZhhoFJoaKVvV17lWQoXYwgWN2nF5crA8J2jw==",
+      "requires": {
+        "assertion-error": "^1.1.0",
+        "check-error": "^1.0.2",
+        "deep-eql": "^3.0.1",
+        "get-func-name": "^2.0.0",
+        "pathval": "^1.1.0",
+        "type-detect": "^4.0.5"
+      }
+    },
+    "check-error": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/check-error/-/check-error-1.0.2.tgz",
+      "integrity": "sha1-V00xLt2Iu13YkS6Sht1sCu1KrII="
+    },
+    "deep-eql": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/deep-eql/-/deep-eql-3.0.1.tgz",
+      "integrity": "sha512-+QeIQyN5ZuO+3Uk5DYh6/1eKO0m0YmJFGNmFHGACpf1ClL1nmlV/p4gNgbl2pJGxgXb4faqo6UE+M5ACEMyVcw==",
+      "requires": {
+        "type-detect": "^4.0.0"
+      }
+    },
+    "get-func-name": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/get-func-name/-/get-func-name-2.0.0.tgz",
+      "integrity": "sha1-6td0q+5y4gQJQzoGY2YCPdaIekE="
+    },
     "jquery": {
       "version": "3.4.1",
       "resolved": "https://registry.npmjs.org/jquery/-/jquery-3.4.1.tgz",
@@ -577,10 +613,20 @@
         }
       }
     },
+    "pathval": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/pathval/-/pathval-1.1.0.tgz",
+      "integrity": "sha1-uULm1L3mUwBe9rcTYd74cn0GReA="
+    },
     "regenerator-runtime": {
       "version": "0.13.4",
       "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.4.tgz",
       "integrity": "sha512-plpwicqEzfEyTQohIKktWigcLzmNStMGwbOUbykx51/29Z3JOGYldaaNGK7ngNXV+UcoqvIMmloZ48Sr74sd+g=="
+    },
+    "type-detect": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
+      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g=="
     }
   }
 }
diff --git a/package.json b/package.json
index f0c1811..d67f294 100644
--- a/package.json
+++ b/package.json
@@ -9,6 +9,7 @@
   },
   "dependencies": {
     "@babel/runtime": "^7.7.6",
+    "chai": "^4.2.0",
     "jquery": "^3.4.1",
     "meteor-node-stubs": "^1.0.0"
   },
-- 
2.11.0


From 14fd85a4f8e3c5524c4c11429ee722f36665d6bd Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Sat, 7 Mar 2020 14:44:55 -0600
Subject: [PATCH 46/49] Step 11.2: Add a scaffold for a method test

---
 imports/api/tasks.tests.js | 12 ++++++++++++
 1 file changed, 12 insertions(+)
 create mode 100644 imports/api/tasks.tests.js

diff --git a/imports/api/tasks.tests.js b/imports/api/tasks.tests.js
new file mode 100644
index 0000000..3e273a5
--- /dev/null
+++ b/imports/api/tasks.tests.js
@@ -0,0 +1,12 @@
+/* eslint-env mocha */
+
+import { Meteor } from 'meteor/meteor';
+
+if (Meteor.isServer) {
+    describe('Tasks', () => {
+        describe('methods', () => {
+            it('can delete owned task', () => {
+            });
+        });
+    });
+} 
\ No newline at end of file
-- 
2.11.0


From d34f67e5fdd61692b9567133989962fc64a74123 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Tue, 14 Apr 2020 22:24:56 -0500
Subject: [PATCH 47/49] Step 11.3: Add a reference to the new test file from
 the test main module

---
 tests/main.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/tests/main.js b/tests/main.js
index 973d17e..679568e 100644
--- a/tests/main.js
+++ b/tests/main.js
@@ -1,4 +1,5 @@
 import assert from "assert";
+import '../imports/api/tasks.tests';
 
 describe("simple-todos", function () {
   it("package.json has correct name", async function () {
-- 
2.11.0


From a05a065437858cb3c2f1cd14ab2e2456100d8664 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Tue, 14 Apr 2020 22:27:46 -0500
Subject: [PATCH 48/49] Step 11.4: Prepare the database for each test

---
 imports/api/tasks.tests.js | 26 +++++++++++++++++++++-----
 1 file changed, 21 insertions(+), 5 deletions(-)

diff --git a/imports/api/tasks.tests.js b/imports/api/tasks.tests.js
index 3e273a5..2b72caf 100644
--- a/imports/api/tasks.tests.js
+++ b/imports/api/tasks.tests.js
@@ -1,12 +1,28 @@
 /* eslint-env mocha */
 
 import { Meteor } from 'meteor/meteor';
+import { Random } from 'meteor/random';
+
+import { Tasks } from './tasks.js';
 
 if (Meteor.isServer) {
-    describe('Tasks', () => {
-        describe('methods', () => {
-            it('can delete owned task', () => {
-            });
+  describe('Tasks', () => {
+    describe('methods', () => {
+      const userId = Random.id();
+      let taskId;
+
+      beforeEach(() => {
+        Tasks.remove({});
+        taskId = Tasks.insert({
+          text: 'test task',
+          createdAt: new Date(),
+          owner: userId,
+          username: 'tmeasday',
         });
+      });
+
+      it('can delete owned task', () => {
+      });
     });
-} 
\ No newline at end of file
+  });
+}
\ No newline at end of file
-- 
2.11.0


From d2aca209de2305e1e3a53b3d2be4f36b2300c603 Mon Sep 17 00:00:00 2001
From: Brian Mulhall <brian.e.mulhall@gmail.com>
Date: Tue, 14 Apr 2020 21:20:29 -0500
Subject: [PATCH 49/49] Step 11.5: Added a test to check the delete method

---
 imports/api/tasks.tests.js | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/imports/api/tasks.tests.js b/imports/api/tasks.tests.js
index 2b72caf..cccbd11 100644
--- a/imports/api/tasks.tests.js
+++ b/imports/api/tasks.tests.js
@@ -2,6 +2,7 @@
 
 import { Meteor } from 'meteor/meteor';
 import { Random } from 'meteor/random';
+import { assert } from 'chai';
 
 import { Tasks } from './tasks.js';
 
@@ -20,8 +21,19 @@ if (Meteor.isServer) {
           username: 'tmeasday',
         });
       });
-
       it('can delete owned task', () => {
+        // Find the internal implementation of the task method so we can
+        // test it in isolation
+        const deleteTask = Meteor.server.method_handlers['tasks.remove'];
+
+        // Set up a fake method invocation that looks like what the method expects
+        const invocation = { userId };
+
+        // Run the method with `this` set to the fake invocation
+        deleteTask.apply(invocation, [taskId]);
+
+        // Verify that the method does what we expected
+        assert.equal(Tasks.find({}).count(), 0);
       });
     });
   });
-- 
2.11.0

